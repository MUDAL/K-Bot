
K_Bot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003694  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003828  08003828  00013828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003840  08003840  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003840  08003840  00013840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003848  08003848  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003848  08003848  00013848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800384c  0800384c  0001384c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003850  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  2000000c  0800385c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  0800385c  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c61b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001846  00000000  00000000  0002c657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc0  00000000  00000000  0002dea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b38  00000000  00000000  0002ea60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000154ab  00000000  00000000  0002f598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c80a  00000000  00000000  00044a43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000895a2  00000000  00000000  0005124d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000da7ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031f0  00000000  00000000  000da840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003810 	.word	0x08003810

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003810 	.word	0x08003810

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <GetMotorSensorPeriod>:
/**
 * @brief Get period of output wave from motor's speed sensor
 * in cycles. [Actual period(in milliseconds) = period(in cycles) / 10]
 * */
void GetMotorSensorPeriod(motorParam_t* motor)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  if((motor->htim->Instance->SR & TIM_SR_CC1IF) == TIM_SR_CC1IF)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	691b      	ldr	r3, [r3, #16]
 80004e8:	f003 0302 	and.w	r3, r3, #2
 80004ec:	2b02      	cmp	r3, #2
 80004ee:	d105      	bne.n	80004fc <GetMotorSensorPeriod+0x24>
  {
    motor->sensorPeriod = motor->htim->Instance->CCR1;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	609a      	str	r2, [r3, #8]
  }
}
 80004fc:	bf00      	nop
 80004fe:	370c      	adds	r7, #12
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr

08000508 <SetMotorSpeed>:

/**
 * @brief Sets motor speed via PWM signal with 4kHz frequency.*/
void SetMotorSpeed(motorParam_t* motor)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  if(motor->speed > MAX_MOTOR_SPEED)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000518:	d303      	bcc.n	8000522 <SetMotorSpeed+0x1a>
  {//Can't exceed the period (4000 cycles)
    motor->speed = MAX_MOTOR_SPEED;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	f640 729f 	movw	r2, #3999	; 0xf9f
 8000520:	60da      	str	r2, [r3, #12]
  }
  switch(motor->type)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	791b      	ldrb	r3, [r3, #4]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d002      	beq.n	8000530 <SetMotorSpeed+0x28>
 800052a:	2b01      	cmp	r3, #1
 800052c:	d006      	beq.n	800053c <SetMotorSpeed+0x34>
      break;
    case RIGHT_MOTOR:
      __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,motor->speed);
      break;
  }
}
 800052e:	e00b      	b.n	8000548 <SetMotorSpeed+0x40>
      __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,motor->speed);
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <SetMotorSpeed+0x4c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	687a      	ldr	r2, [r7, #4]
 8000536:	68d2      	ldr	r2, [r2, #12]
 8000538:	635a      	str	r2, [r3, #52]	; 0x34
      break;
 800053a:	e005      	b.n	8000548 <SetMotorSpeed+0x40>
      __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,motor->speed);
 800053c:	4b05      	ldr	r3, [pc, #20]	; (8000554 <SetMotorSpeed+0x4c>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	687a      	ldr	r2, [r7, #4]
 8000542:	68d2      	ldr	r2, [r2, #12]
 8000544:	639a      	str	r2, [r3, #56]	; 0x38
      break;
 8000546:	bf00      	nop
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	20000028 	.word	0x20000028

08000558 <AdvanceMotor>:

/**
 * @brief Move motor forward*/
void AdvanceMotor(motorParam_t* motor)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  switch(motor->type)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	791b      	ldrb	r3, [r3, #4]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d002      	beq.n	800056e <AdvanceMotor+0x16>
 8000568:	2b01      	cmp	r3, #1
 800056a:	d00d      	beq.n	8000588 <AdvanceMotor+0x30>
    case RIGHT_MOTOR:
      HAL_GPIO_WritePin(motorIn3_GPIO_Port,motorIn3_Pin,GPIO_PIN_SET);
      HAL_GPIO_WritePin(motorIn4_GPIO_Port,motorIn4_Pin,GPIO_PIN_RESET);
      break;
  }
}
 800056c:	e019      	b.n	80005a2 <AdvanceMotor+0x4a>
      HAL_GPIO_WritePin(motorIn1_GPIO_Port,motorIn1_Pin,GPIO_PIN_SET);
 800056e:	2201      	movs	r2, #1
 8000570:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000574:	480d      	ldr	r0, [pc, #52]	; (80005ac <AdvanceMotor+0x54>)
 8000576:	f001 f8f3 	bl	8001760 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(motorIn2_GPIO_Port,motorIn2_Pin,GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000580:	480a      	ldr	r0, [pc, #40]	; (80005ac <AdvanceMotor+0x54>)
 8000582:	f001 f8ed 	bl	8001760 <HAL_GPIO_WritePin>
      break;
 8000586:	e00c      	b.n	80005a2 <AdvanceMotor+0x4a>
      HAL_GPIO_WritePin(motorIn3_GPIO_Port,motorIn3_Pin,GPIO_PIN_SET);
 8000588:	2201      	movs	r2, #1
 800058a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800058e:	4807      	ldr	r0, [pc, #28]	; (80005ac <AdvanceMotor+0x54>)
 8000590:	f001 f8e6 	bl	8001760 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(motorIn4_GPIO_Port,motorIn4_Pin,GPIO_PIN_RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800059a:	4804      	ldr	r0, [pc, #16]	; (80005ac <AdvanceMotor+0x54>)
 800059c:	f001 f8e0 	bl	8001760 <HAL_GPIO_WritePin>
      break;
 80005a0:	bf00      	nop
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40020400 	.word	0x40020400

080005b0 <ReverseMotor>:

/**
 * @brief Move motor backward*/
void ReverseMotor(motorParam_t* motor)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  switch(motor->type)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	791b      	ldrb	r3, [r3, #4]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d002      	beq.n	80005c6 <ReverseMotor+0x16>
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d00d      	beq.n	80005e0 <ReverseMotor+0x30>
    case RIGHT_MOTOR:
      HAL_GPIO_WritePin(motorIn3_GPIO_Port,motorIn3_Pin,GPIO_PIN_RESET);
      HAL_GPIO_WritePin(motorIn4_GPIO_Port,motorIn4_Pin,GPIO_PIN_SET);
      break;
  }
}
 80005c4:	e019      	b.n	80005fa <ReverseMotor+0x4a>
      HAL_GPIO_WritePin(motorIn1_GPIO_Port,motorIn1_Pin,GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005cc:	480d      	ldr	r0, [pc, #52]	; (8000604 <ReverseMotor+0x54>)
 80005ce:	f001 f8c7 	bl	8001760 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(motorIn2_GPIO_Port,motorIn2_Pin,GPIO_PIN_SET);
 80005d2:	2201      	movs	r2, #1
 80005d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d8:	480a      	ldr	r0, [pc, #40]	; (8000604 <ReverseMotor+0x54>)
 80005da:	f001 f8c1 	bl	8001760 <HAL_GPIO_WritePin>
      break;
 80005de:	e00c      	b.n	80005fa <ReverseMotor+0x4a>
      HAL_GPIO_WritePin(motorIn3_GPIO_Port,motorIn3_Pin,GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005e6:	4807      	ldr	r0, [pc, #28]	; (8000604 <ReverseMotor+0x54>)
 80005e8:	f001 f8ba 	bl	8001760 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(motorIn4_GPIO_Port,motorIn4_Pin,GPIO_PIN_SET);
 80005ec:	2201      	movs	r2, #1
 80005ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005f2:	4804      	ldr	r0, [pc, #16]	; (8000604 <ReverseMotor+0x54>)
 80005f4:	f001 f8b4 	bl	8001760 <HAL_GPIO_WritePin>
      break;
 80005f8:	bf00      	nop
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40020400 	.word	0x40020400

08000608 <StopMotors>:

void StopMotors(void)
{//Stop left motor
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(motorIn1_GPIO_Port,motorIn1_Pin,GPIO_PIN_RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000612:	480b      	ldr	r0, [pc, #44]	; (8000640 <StopMotors+0x38>)
 8000614:	f001 f8a4 	bl	8001760 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIn2_GPIO_Port,motorIn2_Pin,GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800061e:	4808      	ldr	r0, [pc, #32]	; (8000640 <StopMotors+0x38>)
 8000620:	f001 f89e 	bl	8001760 <HAL_GPIO_WritePin>
  //Stop right motor
  HAL_GPIO_WritePin(motorIn3_GPIO_Port,motorIn3_Pin,GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800062a:	4805      	ldr	r0, [pc, #20]	; (8000640 <StopMotors+0x38>)
 800062c:	f001 f898 	bl	8001760 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIn4_GPIO_Port,motorIn4_Pin,GPIO_PIN_RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000636:	4802      	ldr	r0, [pc, #8]	; (8000640 <StopMotors+0x38>)
 8000638:	f001 f892 	bl	8001760 <HAL_GPIO_WritePin>
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40020400 	.word	0x40020400

08000644 <InitMotorParam>:
void InitMotorParam(motorParam_t* motor,
		    TIM_HandleTypeDef* htim,
		    motor_t type,
		    uint32_t sensorPeriod,
		    uint32_t speed)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	4613      	mov	r3, r2
 8000652:	71fb      	strb	r3, [r7, #7]
  motor->htim = htim;
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	68ba      	ldr	r2, [r7, #8]
 8000658:	601a      	str	r2, [r3, #0]
  motor->type = type;
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	79fa      	ldrb	r2, [r7, #7]
 800065e:	711a      	strb	r2, [r3, #4]
  motor->sensorPeriod = sensorPeriod;
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	683a      	ldr	r2, [r7, #0]
 8000664:	609a      	str	r2, [r3, #8]
  motor->speed = speed;
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	69ba      	ldr	r2, [r7, #24]
 800066a:	60da      	str	r2, [r3, #12]
}
 800066c:	bf00      	nop
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr

08000678 <RegulateMotorSpeed>:

/**
 * @brief Handles motor speed control*/
void RegulateMotorSpeed(motorParam_t* motor,uint32_t desiredPeriod)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	6039      	str	r1, [r7, #0]
  const uint8_t tolerance = 1; //cycle(s)
 8000682:	2301      	movs	r3, #1
 8000684:	72fb      	strb	r3, [r7, #11]
  uint32_t desiredMotorSpeed = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
  //The equation(s) are affected by battery voltage
  switch(motor->type)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	791b      	ldrb	r3, [r3, #4]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d002      	beq.n	8000698 <RegulateMotorSpeed+0x20>
 8000692:	2b01      	cmp	r3, #1
 8000694:	d00b      	beq.n	80006ae <RegulateMotorSpeed+0x36>
 8000696:	e015      	b.n	80006c4 <RegulateMotorSpeed+0x4c>
  {
    case LEFT_MOTOR:
      desiredMotorSpeed = (6499 - 25*desiredPeriod);
 8000698:	683a      	ldr	r2, [r7, #0]
 800069a:	4613      	mov	r3, r2
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	4413      	add	r3, r2
 80006a0:	009a      	lsls	r2, r3, #2
 80006a2:	4413      	add	r3, r2
 80006a4:	f5c3 53cb 	rsb	r3, r3, #6496	; 0x1960
 80006a8:	3303      	adds	r3, #3
 80006aa:	60fb      	str	r3, [r7, #12]
      break;
 80006ac:	e00a      	b.n	80006c4 <RegulateMotorSpeed+0x4c>
    case RIGHT_MOTOR:
      desiredMotorSpeed = (6999 - 25*desiredPeriod);
 80006ae:	683a      	ldr	r2, [r7, #0]
 80006b0:	4613      	mov	r3, r2
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	4413      	add	r3, r2
 80006b6:	009a      	lsls	r2, r3, #2
 80006b8:	4413      	add	r3, r2
 80006ba:	f5c3 53da 	rsb	r3, r3, #6976	; 0x1b40
 80006be:	3317      	adds	r3, #23
 80006c0:	60fb      	str	r3, [r7, #12]
      break;
 80006c2:	bf00      	nop
  }

  GetMotorSensorPeriod(motor);
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	f7ff ff07 	bl	80004d8 <GetMotorSensorPeriod>
  if(motor->sensorPeriod <= desiredPeriod)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	689b      	ldr	r3, [r3, #8]
 80006ce:	683a      	ldr	r2, [r7, #0]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d313      	bcc.n	80006fc <RegulateMotorSpeed+0x84>
  {
    if(motor->speed > (desiredMotorSpeed-tolerance))
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	68da      	ldr	r2, [r3, #12]
 80006d8:	7afb      	ldrb	r3, [r7, #11]
 80006da:	68f9      	ldr	r1, [r7, #12]
 80006dc:	1acb      	subs	r3, r1, r3
 80006de:	429a      	cmp	r2, r3
 80006e0:	d905      	bls.n	80006ee <RegulateMotorSpeed+0x76>
    {
      motor->speed--;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	68db      	ldr	r3, [r3, #12]
 80006e6:	1e5a      	subs	r2, r3, #1
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	e002      	b.n	80006f4 <RegulateMotorSpeed+0x7c>
    }
    else
    {
      motor->speed = desiredMotorSpeed;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	68fa      	ldr	r2, [r7, #12]
 80006f2:	60da      	str	r2, [r3, #12]
    }
    SetMotorSpeed(motor);
 80006f4:	6878      	ldr	r0, [r7, #4]
 80006f6:	f7ff ff07 	bl	8000508 <SetMotorSpeed>
    {
      motor->speed = desiredMotorSpeed;
    }
    SetMotorSpeed(motor);
  }
}
 80006fa:	e012      	b.n	8000722 <RegulateMotorSpeed+0xaa>
    if(motor->speed < (desiredMotorSpeed+tolerance))
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	68da      	ldr	r2, [r3, #12]
 8000700:	7af9      	ldrb	r1, [r7, #11]
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	440b      	add	r3, r1
 8000706:	429a      	cmp	r2, r3
 8000708:	d205      	bcs.n	8000716 <RegulateMotorSpeed+0x9e>
      motor->speed++;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	68db      	ldr	r3, [r3, #12]
 800070e:	1c5a      	adds	r2, r3, #1
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	e002      	b.n	800071c <RegulateMotorSpeed+0xa4>
      motor->speed = desiredMotorSpeed;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	68fa      	ldr	r2, [r7, #12]
 800071a:	60da      	str	r2, [r3, #12]
    SetMotorSpeed(motor);
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f7ff fef3 	bl	8000508 <SetMotorSpeed>
}
 8000722:	bf00      	nop
 8000724:	3710      	adds	r7, #16
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
	...

0800072c <GetBluetoothData>:

/**
 * @brief Returns data received from the K-Bot app via bluetooth*/
char GetBluetoothData(void)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
  char btData = '\0';
 8000732:	2300      	movs	r3, #0
 8000734:	71fb      	strb	r3, [r7, #7]
  if((huart6.Instance->SR & USART_SR_RXNE) == USART_SR_RXNE)
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <GetBluetoothData+0x30>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f003 0320 	and.w	r3, r3, #32
 8000740:	2b20      	cmp	r3, #32
 8000742:	d103      	bne.n	800074c <GetBluetoothData+0x20>
  {
     btData = huart6.Instance->DR;
 8000744:	4b05      	ldr	r3, [pc, #20]	; (800075c <GetBluetoothData+0x30>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	685b      	ldr	r3, [r3, #4]
 800074a:	71fb      	strb	r3, [r7, #7]
  }
  return btData;
 800074c:	79fb      	ldrb	r3, [r7, #7]
}
 800074e:	4618      	mov	r0, r3
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	20000100 	.word	0x20000100

08000760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08c      	sub	sp, #48	; 0x30
 8000764:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000766:	f000 fcfb 	bl	8001160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076a:	f000 f8b1 	bl	80008d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800076e:	f000 fadb 	bl	8000d28 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000772:	f000 f9a5 	bl	8000ac0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000776:	f000 fa27 	bl	8000bc8 <MX_TIM3_Init>
  MX_TIM1_Init();
 800077a:	f000 f909 	bl	8000990 <MX_TIM1_Init>
  MX_USART6_UART_Init();
 800077e:	f000 faa9 	bl	8000cd4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  char appData = '\0';
 8000782:	2300      	movs	r3, #0
 8000784:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  bool speedBalanceEnable = false;
 8000788:	2300      	movs	r3, #0
 800078a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t targetPeriod = PERIOD_15MS;
 800078e:	2396      	movs	r3, #150	; 0x96
 8000790:	623b      	str	r3, [r7, #32]
  motorParam_t leftMotor;
  motorParam_t rightMotor;

  InitMotorParam(&leftMotor,&htim2,LEFT_MOTOR,0,1999);
 8000792:	f107 0010 	add.w	r0, r7, #16
 8000796:	f240 73cf 	movw	r3, #1999	; 0x7cf
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	2300      	movs	r3, #0
 800079e:	2200      	movs	r2, #0
 80007a0:	4948      	ldr	r1, [pc, #288]	; (80008c4 <main+0x164>)
 80007a2:	f7ff ff4f 	bl	8000644 <InitMotorParam>
  InitMotorParam(&rightMotor,&htim3,RIGHT_MOTOR,0,1999);
 80007a6:	4638      	mov	r0, r7
 80007a8:	f240 73cf 	movw	r3, #1999	; 0x7cf
 80007ac:	9300      	str	r3, [sp, #0]
 80007ae:	2300      	movs	r3, #0
 80007b0:	2201      	movs	r2, #1
 80007b2:	4945      	ldr	r1, [pc, #276]	; (80008c8 <main+0x168>)
 80007b4:	f7ff ff46 	bl	8000644 <InitMotorParam>

  SetMotorSpeed(&leftMotor);
 80007b8:	f107 0310 	add.w	r3, r7, #16
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff fea3 	bl	8000508 <SetMotorSpeed>
  ReverseMotor(&leftMotor);
 80007c2:	f107 0310 	add.w	r3, r7, #16
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fef2 	bl	80005b0 <ReverseMotor>
  SetMotorSpeed(&rightMotor);
 80007cc:	463b      	mov	r3, r7
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff fe9a 	bl	8000508 <SetMotorSpeed>
  ReverseMotor(&rightMotor);
 80007d4:	463b      	mov	r3, r7
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff feea 	bl	80005b0 <ReverseMotor>
  HAL_Delay(3000);
 80007dc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80007e0:	f000 fd30 	bl	8001244 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    RegulateMotorSpeed(&leftMotor,targetPeriod); //test
 80007e4:	f107 0310 	add.w	r3, r7, #16
 80007e8:	6a39      	ldr	r1, [r7, #32]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff ff44 	bl	8000678 <RegulateMotorSpeed>
    RegulateMotorSpeed(&rightMotor,targetPeriod); //test
 80007f0:	463b      	mov	r3, r7
 80007f2:	6a39      	ldr	r1, [r7, #32]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ff3f 	bl	8000678 <RegulateMotorSpeed>
    /* USER CODE BEGIN 3 */
    appData = GetBluetoothData();
 80007fa:	f7ff ff97 	bl	800072c <GetBluetoothData>
 80007fe:	4603      	mov	r3, r0
 8000800:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch(appData)
 8000804:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000808:	3b30      	subs	r3, #48	; 0x30
 800080a:	2b06      	cmp	r3, #6
 800080c:	d84a      	bhi.n	80008a4 <main+0x144>
 800080e:	a201      	add	r2, pc, #4	; (adr r2, 8000814 <main+0xb4>)
 8000810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000814:	08000831 	.word	0x08000831
 8000818:	08000843 	.word	0x08000843
 800081c:	08000855 	.word	0x08000855
 8000820:	0800086f 	.word	0x0800086f
 8000824:	08000877 	.word	0x08000877
 8000828:	08000883 	.word	0x08000883
 800082c:	0800088b 	.word	0x0800088b
    {
      case '0': //Pump control
	HAL_GPIO_TogglePin(pump_GPIO_Port,pump_Pin);
 8000830:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000834:	4825      	ldr	r0, [pc, #148]	; (80008cc <main+0x16c>)
 8000836:	f000 ffac 	bl	8001792 <HAL_GPIO_TogglePin>
	speedBalanceEnable = false;
 800083a:	2300      	movs	r3, #0
 800083c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	break;
 8000840:	e030      	b.n	80008a4 <main+0x144>
      case '1': //Brush control
	HAL_GPIO_TogglePin(brush_GPIO_Port,brush_Pin);
 8000842:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000846:	4821      	ldr	r0, [pc, #132]	; (80008cc <main+0x16c>)
 8000848:	f000 ffa3 	bl	8001792 <HAL_GPIO_TogglePin>
	speedBalanceEnable = false;
 800084c:	2300      	movs	r3, #0
 800084e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	break;
 8000852:	e027      	b.n	80008a4 <main+0x144>
      case '2': //Move back
	ReverseMotor(&leftMotor);
 8000854:	f107 0310 	add.w	r3, r7, #16
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff fea9 	bl	80005b0 <ReverseMotor>
	ReverseMotor(&rightMotor);
 800085e:	463b      	mov	r3, r7
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff fea5 	bl	80005b0 <ReverseMotor>
	speedBalanceEnable = true;
 8000866:	2301      	movs	r3, #1
 8000868:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	break;
 800086c:	e01a      	b.n	80008a4 <main+0x144>
      case '3': //Turn left
	speedBalanceEnable = false;
 800086e:	2300      	movs	r3, #0
 8000870:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	break;
 8000874:	e016      	b.n	80008a4 <main+0x144>
      case '4': //Stop
	StopMotors();
 8000876:	f7ff fec7 	bl	8000608 <StopMotors>
	speedBalanceEnable = false;
 800087a:	2300      	movs	r3, #0
 800087c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	break;
 8000880:	e010      	b.n	80008a4 <main+0x144>
      case '5': //Turn right
	speedBalanceEnable = false;
 8000882:	2300      	movs	r3, #0
 8000884:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	break;
 8000888:	e00c      	b.n	80008a4 <main+0x144>
      case '6': //Move forward
	AdvanceMotor(&leftMotor);
 800088a:	f107 0310 	add.w	r3, r7, #16
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fe62 	bl	8000558 <AdvanceMotor>
	AdvanceMotor(&rightMotor);
 8000894:	463b      	mov	r3, r7
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff fe5e 	bl	8000558 <AdvanceMotor>
	speedBalanceEnable = true;
 800089c:	2301      	movs	r3, #1
 800089e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	break;
 80008a2:	bf00      	nop
    }
    //Speed adjustment
    if(speedBalanceEnable)
 80008a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d09b      	beq.n	80007e4 <main+0x84>
    {
	RegulateMotorSpeed(&leftMotor,targetPeriod);
 80008ac:	f107 0310 	add.w	r3, r7, #16
 80008b0:	6a39      	ldr	r1, [r7, #32]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff fee0 	bl	8000678 <RegulateMotorSpeed>
	RegulateMotorSpeed(&rightMotor,targetPeriod);
 80008b8:	463b      	mov	r3, r7
 80008ba:	6a39      	ldr	r1, [r7, #32]
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff fedb 	bl	8000678 <RegulateMotorSpeed>
    RegulateMotorSpeed(&leftMotor,targetPeriod); //test
 80008c2:	e78f      	b.n	80007e4 <main+0x84>
 80008c4:	20000070 	.word	0x20000070
 80008c8:	200000b8 	.word	0x200000b8
 80008cc:	40020800 	.word	0x40020800

080008d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b094      	sub	sp, #80	; 0x50
 80008d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d6:	f107 0320 	add.w	r3, r7, #32
 80008da:	2230      	movs	r2, #48	; 0x30
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f002 ff8e 	bl	8003800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f4:	2300      	movs	r3, #0
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	4b23      	ldr	r3, [pc, #140]	; (8000988 <SystemClock_Config+0xb8>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fc:	4a22      	ldr	r2, [pc, #136]	; (8000988 <SystemClock_Config+0xb8>)
 80008fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000902:	6413      	str	r3, [r2, #64]	; 0x40
 8000904:	4b20      	ldr	r3, [pc, #128]	; (8000988 <SystemClock_Config+0xb8>)
 8000906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000910:	2300      	movs	r3, #0
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	4b1d      	ldr	r3, [pc, #116]	; (800098c <SystemClock_Config+0xbc>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800091c:	4a1b      	ldr	r2, [pc, #108]	; (800098c <SystemClock_Config+0xbc>)
 800091e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000922:	6013      	str	r3, [r2, #0]
 8000924:	4b19      	ldr	r3, [pc, #100]	; (800098c <SystemClock_Config+0xbc>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000930:	2302      	movs	r3, #2
 8000932:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000934:	2301      	movs	r3, #1
 8000936:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000938:	2310      	movs	r3, #16
 800093a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800093c:	2300      	movs	r3, #0
 800093e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000940:	f107 0320 	add.w	r3, r7, #32
 8000944:	4618      	mov	r0, r3
 8000946:	f000 ff3f 	bl	80017c8 <HAL_RCC_OscConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000950:	f000 fa54 	bl	8000dfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000954:	230f      	movs	r3, #15
 8000956:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000958:	2300      	movs	r3, #0
 800095a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000968:	f107 030c 	add.w	r3, r7, #12
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f001 f9a2 	bl	8001cb8 <HAL_RCC_ClockConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800097a:	f000 fa3f 	bl	8000dfc <Error_Handler>
  }
}
 800097e:	bf00      	nop
 8000980:	3750      	adds	r7, #80	; 0x50
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40023800 	.word	0x40023800
 800098c:	40007000 	.word	0x40007000

08000990 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b092      	sub	sp, #72	; 0x48
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000996:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
 80009b0:	615a      	str	r2, [r3, #20]
 80009b2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	2220      	movs	r2, #32
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f002 ff20 	bl	8003800 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009c0:	4b3d      	ldr	r3, [pc, #244]	; (8000ab8 <MX_TIM1_Init+0x128>)
 80009c2:	4a3e      	ldr	r2, [pc, #248]	; (8000abc <MX_TIM1_Init+0x12c>)
 80009c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009c6:	4b3c      	ldr	r3, [pc, #240]	; (8000ab8 <MX_TIM1_Init+0x128>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009cc:	4b3a      	ldr	r3, [pc, #232]	; (8000ab8 <MX_TIM1_Init+0x128>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4000-1;
 80009d2:	4b39      	ldr	r3, [pc, #228]	; (8000ab8 <MX_TIM1_Init+0x128>)
 80009d4:	f640 729f 	movw	r2, #3999	; 0xf9f
 80009d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009da:	4b37      	ldr	r3, [pc, #220]	; (8000ab8 <MX_TIM1_Init+0x128>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009e0:	4b35      	ldr	r3, [pc, #212]	; (8000ab8 <MX_TIM1_Init+0x128>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009e6:	4b34      	ldr	r3, [pc, #208]	; (8000ab8 <MX_TIM1_Init+0x128>)
 80009e8:	2280      	movs	r2, #128	; 0x80
 80009ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009ec:	4832      	ldr	r0, [pc, #200]	; (8000ab8 <MX_TIM1_Init+0x128>)
 80009ee:	f001 fb43 	bl	8002078 <HAL_TIM_PWM_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80009f8:	f000 fa00 	bl	8000dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009fc:	2300      	movs	r3, #0
 80009fe:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a00:	2300      	movs	r3, #0
 8000a02:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a08:	4619      	mov	r1, r3
 8000a0a:	482b      	ldr	r0, [pc, #172]	; (8000ab8 <MX_TIM1_Init+0x128>)
 8000a0c:	f002 fb52 	bl	80030b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000a16:	f000 f9f1 	bl	8000dfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a1a:	2360      	movs	r3, #96	; 0x60
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a22:	2300      	movs	r3, #0
 8000a24:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a26:	2300      	movs	r3, #0
 8000a28:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a32:	2300      	movs	r3, #0
 8000a34:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	481e      	ldr	r0, [pc, #120]	; (8000ab8 <MX_TIM1_Init+0x128>)
 8000a40:	f001 fdd4 	bl	80025ec <HAL_TIM_PWM_ConfigChannel>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000a4a:	f000 f9d7 	bl	8000dfc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a52:	2204      	movs	r2, #4
 8000a54:	4619      	mov	r1, r3
 8000a56:	4818      	ldr	r0, [pc, #96]	; (8000ab8 <MX_TIM1_Init+0x128>)
 8000a58:	f001 fdc8 	bl	80025ec <HAL_TIM_PWM_ConfigChannel>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000a62:	f000 f9cb 	bl	8000dfc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a7e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	4619      	mov	r1, r3
 8000a88:	480b      	ldr	r0, [pc, #44]	; (8000ab8 <MX_TIM1_Init+0x128>)
 8000a8a:	f002 fb81 	bl	8003190 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000a94:	f000 f9b2 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4807      	ldr	r0, [pc, #28]	; (8000ab8 <MX_TIM1_Init+0x128>)
 8000a9c:	f001 fb3c 	bl	8002118 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8000aa0:	2104      	movs	r1, #4
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <MX_TIM1_Init+0x128>)
 8000aa4:	f001 fb38 	bl	8002118 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000aa8:	4803      	ldr	r0, [pc, #12]	; (8000ab8 <MX_TIM1_Init+0x128>)
 8000aaa:	f000 fa71 	bl	8000f90 <HAL_TIM_MspPostInit>

}
 8000aae:	bf00      	nop
 8000ab0:	3748      	adds	r7, #72	; 0x48
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000028 	.word	0x20000028
 8000abc:	40010000 	.word	0x40010000

08000ac0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08c      	sub	sp, #48	; 0x30
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ac6:	f107 031c 	add.w	r3, r7, #28
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ad6:	f107 030c 	add.w	r3, r7, #12
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000aec:	4b35      	ldr	r3, [pc, #212]	; (8000bc4 <MX_TIM2_Init+0x104>)
 8000aee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000af2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1600-1;
 8000af4:	4b33      	ldr	r3, [pc, #204]	; (8000bc4 <MX_TIM2_Init+0x104>)
 8000af6:	f240 623f 	movw	r2, #1599	; 0x63f
 8000afa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afc:	4b31      	ldr	r3, [pc, #196]	; (8000bc4 <MX_TIM2_Init+0x104>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000b02:	4b30      	ldr	r3, [pc, #192]	; (8000bc4 <MX_TIM2_Init+0x104>)
 8000b04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0a:	4b2e      	ldr	r3, [pc, #184]	; (8000bc4 <MX_TIM2_Init+0x104>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b10:	4b2c      	ldr	r3, [pc, #176]	; (8000bc4 <MX_TIM2_Init+0x104>)
 8000b12:	2280      	movs	r2, #128	; 0x80
 8000b14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000b16:	482b      	ldr	r0, [pc, #172]	; (8000bc4 <MX_TIM2_Init+0x104>)
 8000b18:	f001 fbae 	bl	8002278 <HAL_TIM_IC_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000b22:	f000 f96b 	bl	8000dfc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000b26:	2304      	movs	r3, #4
 8000b28:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000b2a:	2350      	movs	r3, #80	; 0x50
 8000b2c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000b32:	2300      	movs	r3, #0
 8000b34:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 15;
 8000b36:	230f      	movs	r3, #15
 8000b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4820      	ldr	r0, [pc, #128]	; (8000bc4 <MX_TIM2_Init+0x104>)
 8000b42:	f001 fe15 	bl	8002770 <HAL_TIM_SlaveConfigSynchro>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000b4c:	f000 f956 	bl	8000dfc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b54:	2301      	movs	r3, #1
 8000b56:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 15;
 8000b5c:	230f      	movs	r3, #15
 8000b5e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	2200      	movs	r2, #0
 8000b66:	4619      	mov	r1, r3
 8000b68:	4816      	ldr	r0, [pc, #88]	; (8000bc4 <MX_TIM2_Init+0x104>)
 8000b6a:	f001 fca3 	bl	80024b4 <HAL_TIM_IC_ConfigChannel>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8000b74:	f000 f942 	bl	8000dfc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000b80:	f107 030c 	add.w	r3, r7, #12
 8000b84:	2204      	movs	r2, #4
 8000b86:	4619      	mov	r1, r3
 8000b88:	480e      	ldr	r0, [pc, #56]	; (8000bc4 <MX_TIM2_Init+0x104>)
 8000b8a:	f001 fc93 	bl	80024b4 <HAL_TIM_IC_ConfigChannel>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000b94:	f000 f932 	bl	8000dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ba0:	1d3b      	adds	r3, r7, #4
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4807      	ldr	r0, [pc, #28]	; (8000bc4 <MX_TIM2_Init+0x104>)
 8000ba6:	f002 fa85 	bl	80030b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 8000bb0:	f000 f924 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_IC_Start(&htim2,TIM_CHANNEL_1);
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4803      	ldr	r0, [pc, #12]	; (8000bc4 <MX_TIM2_Init+0x104>)
 8000bb8:	f001 fbae 	bl	8002318 <HAL_TIM_IC_Start>
  /* USER CODE END TIM2_Init 2 */

}
 8000bbc:	bf00      	nop
 8000bbe:	3730      	adds	r7, #48	; 0x30
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000070 	.word	0x20000070

08000bc8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08c      	sub	sp, #48	; 0x30
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000bce:	f107 031c 	add.w	r3, r7, #28
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
 8000bdc:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000bde:	f107 030c 	add.w	r3, r7, #12
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bf4:	4b35      	ldr	r3, [pc, #212]	; (8000ccc <MX_TIM3_Init+0x104>)
 8000bf6:	4a36      	ldr	r2, [pc, #216]	; (8000cd0 <MX_TIM3_Init+0x108>)
 8000bf8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1600-1;
 8000bfa:	4b34      	ldr	r3, [pc, #208]	; (8000ccc <MX_TIM3_Init+0x104>)
 8000bfc:	f240 623f 	movw	r2, #1599	; 0x63f
 8000c00:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c02:	4b32      	ldr	r3, [pc, #200]	; (8000ccc <MX_TIM3_Init+0x104>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000c08:	4b30      	ldr	r3, [pc, #192]	; (8000ccc <MX_TIM3_Init+0x104>)
 8000c0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c0e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c10:	4b2e      	ldr	r3, [pc, #184]	; (8000ccc <MX_TIM3_Init+0x104>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c16:	4b2d      	ldr	r3, [pc, #180]	; (8000ccc <MX_TIM3_Init+0x104>)
 8000c18:	2280      	movs	r2, #128	; 0x80
 8000c1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000c1c:	482b      	ldr	r0, [pc, #172]	; (8000ccc <MX_TIM3_Init+0x104>)
 8000c1e:	f001 fb2b 	bl	8002278 <HAL_TIM_IC_Init>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000c28:	f000 f8e8 	bl	8000dfc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000c2c:	2304      	movs	r3, #4
 8000c2e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000c30:	2350      	movs	r3, #80	; 0x50
 8000c32:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c34:	2300      	movs	r3, #0
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 15;
 8000c3c:	230f      	movs	r3, #15
 8000c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000c40:	f107 031c 	add.w	r3, r7, #28
 8000c44:	4619      	mov	r1, r3
 8000c46:	4821      	ldr	r0, [pc, #132]	; (8000ccc <MX_TIM3_Init+0x104>)
 8000c48:	f001 fd92 	bl	8002770 <HAL_TIM_SlaveConfigSynchro>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000c52:	f000 f8d3 	bl	8000dfc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 15;
 8000c62:	230f      	movs	r3, #15
 8000c64:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c66:	f107 030c 	add.w	r3, r7, #12
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4817      	ldr	r0, [pc, #92]	; (8000ccc <MX_TIM3_Init+0x104>)
 8000c70:	f001 fc20 	bl	80024b4 <HAL_TIM_IC_ConfigChannel>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8000c7a:	f000 f8bf 	bl	8000dfc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000c82:	2302      	movs	r3, #2
 8000c84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000c86:	f107 030c 	add.w	r3, r7, #12
 8000c8a:	2204      	movs	r2, #4
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	480f      	ldr	r0, [pc, #60]	; (8000ccc <MX_TIM3_Init+0x104>)
 8000c90:	f001 fc10 	bl	80024b4 <HAL_TIM_IC_ConfigChannel>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000c9a:	f000 f8af 	bl	8000dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4808      	ldr	r0, [pc, #32]	; (8000ccc <MX_TIM3_Init+0x104>)
 8000cac:	f002 fa02 	bl	80030b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 8000cb6:	f000 f8a1 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_IC_Start(&htim3,TIM_CHANNEL_1);
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4803      	ldr	r0, [pc, #12]	; (8000ccc <MX_TIM3_Init+0x104>)
 8000cbe:	f001 fb2b 	bl	8002318 <HAL_TIM_IC_Start>
  /* USER CODE END TIM3_Init 2 */

}
 8000cc2:	bf00      	nop
 8000cc4:	3730      	adds	r7, #48	; 0x30
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	200000b8 	.word	0x200000b8
 8000cd0:	40000400 	.word	0x40000400

08000cd4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000cd8:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <MX_USART6_UART_Init+0x4c>)
 8000cda:	4a12      	ldr	r2, [pc, #72]	; (8000d24 <MX_USART6_UART_Init+0x50>)
 8000cdc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000cde:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <MX_USART6_UART_Init+0x4c>)
 8000ce0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ce4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <MX_USART6_UART_Init+0x4c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000cec:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <MX_USART6_UART_Init+0x4c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <MX_USART6_UART_Init+0x4c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 8000cf8:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <MX_USART6_UART_Init+0x4c>)
 8000cfa:	2204      	movs	r2, #4
 8000cfc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cfe:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <MX_USART6_UART_Init+0x4c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <MX_USART6_UART_Init+0x4c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000d0a:	4805      	ldr	r0, [pc, #20]	; (8000d20 <MX_USART6_UART_Init+0x4c>)
 8000d0c:	f002 fa92 	bl	8003234 <HAL_UART_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000d16:	f000 f871 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000100 	.word	0x20000100
 8000d24:	40011400 	.word	0x40011400

08000d28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2e:	f107 030c 	add.w	r3, r7, #12
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
 8000d3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	4b2b      	ldr	r3, [pc, #172]	; (8000df0 <MX_GPIO_Init+0xc8>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a2a      	ldr	r2, [pc, #168]	; (8000df0 <MX_GPIO_Init+0xc8>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b28      	ldr	r3, [pc, #160]	; (8000df0 <MX_GPIO_Init+0xc8>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	4b24      	ldr	r3, [pc, #144]	; (8000df0 <MX_GPIO_Init+0xc8>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a23      	ldr	r2, [pc, #140]	; (8000df0 <MX_GPIO_Init+0xc8>)
 8000d64:	f043 0302 	orr.w	r3, r3, #2
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b21      	ldr	r3, [pc, #132]	; (8000df0 <MX_GPIO_Init+0xc8>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0302 	and.w	r3, r3, #2
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	603b      	str	r3, [r7, #0]
 8000d7a:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <MX_GPIO_Init+0xc8>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a1c      	ldr	r2, [pc, #112]	; (8000df0 <MX_GPIO_Init+0xc8>)
 8000d80:	f043 0304 	orr.w	r3, r3, #4
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <MX_GPIO_Init+0xc8>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0304 	and.w	r3, r3, #4
 8000d8e:	603b      	str	r3, [r7, #0]
 8000d90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, motorIn1_Pin|motorIn2_Pin|motorIn3_Pin|motorIn4_Pin, GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000d98:	4816      	ldr	r0, [pc, #88]	; (8000df4 <MX_GPIO_Init+0xcc>)
 8000d9a:	f000 fce1 	bl	8001760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, pump_Pin|brush_Pin, GPIO_PIN_RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000da4:	4814      	ldr	r0, [pc, #80]	; (8000df8 <MX_GPIO_Init+0xd0>)
 8000da6:	f000 fcdb 	bl	8001760 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : motorIn1_Pin motorIn2_Pin motorIn3_Pin motorIn4_Pin */
  GPIO_InitStruct.Pin = motorIn1_Pin|motorIn2_Pin|motorIn3_Pin|motorIn4_Pin;
 8000daa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000dae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db0:	2301      	movs	r3, #1
 8000db2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbc:	f107 030c 	add.w	r3, r7, #12
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	480c      	ldr	r0, [pc, #48]	; (8000df4 <MX_GPIO_Init+0xcc>)
 8000dc4:	f000 fb48 	bl	8001458 <HAL_GPIO_Init>

  /*Configure GPIO pins : pump_Pin brush_Pin */
  GPIO_InitStruct.Pin = pump_Pin|brush_Pin;
 8000dc8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dcc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dda:	f107 030c 	add.w	r3, r7, #12
 8000dde:	4619      	mov	r1, r3
 8000de0:	4805      	ldr	r0, [pc, #20]	; (8000df8 <MX_GPIO_Init+0xd0>)
 8000de2:	f000 fb39 	bl	8001458 <HAL_GPIO_Init>

}
 8000de6:	bf00      	nop
 8000de8:	3720      	adds	r7, #32
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40020400 	.word	0x40020400
 8000df8:	40020800 	.word	0x40020800

08000dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e00:	b672      	cpsid	i
}
 8000e02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <Error_Handler+0x8>
	...

08000e08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <HAL_MspInit+0x4c>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	4a0f      	ldr	r2, [pc, #60]	; (8000e54 <HAL_MspInit+0x4c>)
 8000e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1e:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <HAL_MspInit+0x4c>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	603b      	str	r3, [r7, #0]
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <HAL_MspInit+0x4c>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	4a08      	ldr	r2, [pc, #32]	; (8000e54 <HAL_MspInit+0x4c>)
 8000e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e38:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_MspInit+0x4c>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e42:	603b      	str	r3, [r7, #0]
 8000e44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	40023800 	.word	0x40023800

08000e58 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a0b      	ldr	r2, [pc, #44]	; (8000e94 <HAL_TIM_PWM_MspInit+0x3c>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d10d      	bne.n	8000e86 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <HAL_TIM_PWM_MspInit+0x40>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e72:	4a09      	ldr	r2, [pc, #36]	; (8000e98 <HAL_TIM_PWM_MspInit+0x40>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6453      	str	r3, [r2, #68]	; 0x44
 8000e7a:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <HAL_TIM_PWM_MspInit+0x40>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e86:	bf00      	nop
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	40010000 	.word	0x40010000
 8000e98:	40023800 	.word	0x40023800

08000e9c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08c      	sub	sp, #48	; 0x30
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ebc:	d12c      	bne.n	8000f18 <HAL_TIM_IC_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61bb      	str	r3, [r7, #24]
 8000ec2:	4b30      	ldr	r3, [pc, #192]	; (8000f84 <HAL_TIM_IC_MspInit+0xe8>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	4a2f      	ldr	r2, [pc, #188]	; (8000f84 <HAL_TIM_IC_MspInit+0xe8>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ece:	4b2d      	ldr	r3, [pc, #180]	; (8000f84 <HAL_TIM_IC_MspInit+0xe8>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	61bb      	str	r3, [r7, #24]
 8000ed8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
 8000ede:	4b29      	ldr	r3, [pc, #164]	; (8000f84 <HAL_TIM_IC_MspInit+0xe8>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a28      	ldr	r2, [pc, #160]	; (8000f84 <HAL_TIM_IC_MspInit+0xe8>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b26      	ldr	r3, [pc, #152]	; (8000f84 <HAL_TIM_IC_MspInit+0xe8>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = leftSpeedSensor_Pin;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f06:	2301      	movs	r3, #1
 8000f08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(leftSpeedSensor_GPIO_Port, &GPIO_InitStruct);
 8000f0a:	f107 031c 	add.w	r3, r7, #28
 8000f0e:	4619      	mov	r1, r3
 8000f10:	481d      	ldr	r0, [pc, #116]	; (8000f88 <HAL_TIM_IC_MspInit+0xec>)
 8000f12:	f000 faa1 	bl	8001458 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f16:	e030      	b.n	8000f7a <HAL_TIM_IC_MspInit+0xde>
  else if(htim_ic->Instance==TIM3)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a1b      	ldr	r2, [pc, #108]	; (8000f8c <HAL_TIM_IC_MspInit+0xf0>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d12b      	bne.n	8000f7a <HAL_TIM_IC_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <HAL_TIM_IC_MspInit+0xe8>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	4a16      	ldr	r2, [pc, #88]	; (8000f84 <HAL_TIM_IC_MspInit+0xe8>)
 8000f2c:	f043 0302 	orr.w	r3, r3, #2
 8000f30:	6413      	str	r3, [r2, #64]	; 0x40
 8000f32:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <HAL_TIM_IC_MspInit+0xe8>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <HAL_TIM_IC_MspInit+0xe8>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a0f      	ldr	r2, [pc, #60]	; (8000f84 <HAL_TIM_IC_MspInit+0xe8>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <HAL_TIM_IC_MspInit+0xe8>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = rightSpeedSensor_Pin;
 8000f5a:	2340      	movs	r3, #64	; 0x40
 8000f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(rightSpeedSensor_GPIO_Port, &GPIO_InitStruct);
 8000f6e:	f107 031c 	add.w	r3, r7, #28
 8000f72:	4619      	mov	r1, r3
 8000f74:	4804      	ldr	r0, [pc, #16]	; (8000f88 <HAL_TIM_IC_MspInit+0xec>)
 8000f76:	f000 fa6f 	bl	8001458 <HAL_GPIO_Init>
}
 8000f7a:	bf00      	nop
 8000f7c:	3730      	adds	r7, #48	; 0x30
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40020000 	.word	0x40020000
 8000f8c:	40000400 	.word	0x40000400

08000f90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a12      	ldr	r2, [pc, #72]	; (8000ff8 <HAL_TIM_MspPostInit+0x68>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d11e      	bne.n	8000ff0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <HAL_TIM_MspPostInit+0x6c>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a10      	ldr	r2, [pc, #64]	; (8000ffc <HAL_TIM_MspPostInit+0x6c>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <HAL_TIM_MspPostInit+0x6c>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = leftMotorPWM_Pin|rightMotorPWM_Pin;
 8000fce:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fd2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	f107 030c 	add.w	r3, r7, #12
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4805      	ldr	r0, [pc, #20]	; (8001000 <HAL_TIM_MspPostInit+0x70>)
 8000fec:	f000 fa34 	bl	8001458 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ff0:	bf00      	nop
 8000ff2:	3720      	adds	r7, #32
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40010000 	.word	0x40010000
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40020000 	.word	0x40020000

08001004 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08a      	sub	sp, #40	; 0x28
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a19      	ldr	r2, [pc, #100]	; (8001088 <HAL_UART_MspInit+0x84>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d12b      	bne.n	800107e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
 800102a:	4b18      	ldr	r3, [pc, #96]	; (800108c <HAL_UART_MspInit+0x88>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102e:	4a17      	ldr	r2, [pc, #92]	; (800108c <HAL_UART_MspInit+0x88>)
 8001030:	f043 0320 	orr.w	r3, r3, #32
 8001034:	6453      	str	r3, [r2, #68]	; 0x44
 8001036:	4b15      	ldr	r3, [pc, #84]	; (800108c <HAL_UART_MspInit+0x88>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103a:	f003 0320 	and.w	r3, r3, #32
 800103e:	613b      	str	r3, [r7, #16]
 8001040:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <HAL_UART_MspInit+0x88>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a10      	ldr	r2, [pc, #64]	; (800108c <HAL_UART_MspInit+0x88>)
 800104c:	f043 0304 	orr.w	r3, r3, #4
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b0e      	ldr	r3, [pc, #56]	; (800108c <HAL_UART_MspInit+0x88>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0304 	and.w	r3, r3, #4
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|bluetoothRx_Pin;
 800105e:	23c0      	movs	r3, #192	; 0xc0
 8001060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106a:	2303      	movs	r3, #3
 800106c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800106e:	2308      	movs	r3, #8
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <HAL_UART_MspInit+0x8c>)
 800107a:	f000 f9ed 	bl	8001458 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800107e:	bf00      	nop
 8001080:	3728      	adds	r7, #40	; 0x28
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40011400 	.word	0x40011400
 800108c:	40023800 	.word	0x40023800
 8001090:	40020800 	.word	0x40020800

08001094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <NMI_Handler+0x4>

0800109a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800109e:	e7fe      	b.n	800109e <HardFault_Handler+0x4>

080010a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a4:	e7fe      	b.n	80010a4 <MemManage_Handler+0x4>

080010a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010aa:	e7fe      	b.n	80010aa <BusFault_Handler+0x4>

080010ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <UsageFault_Handler+0x4>

080010b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e0:	f000 f890 	bl	8001204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <SystemInit+0x20>)
 80010ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010f2:	4a05      	ldr	r2, [pc, #20]	; (8001108 <SystemInit+0x20>)
 80010f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800110c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001144 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001110:	480d      	ldr	r0, [pc, #52]	; (8001148 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001112:	490e      	ldr	r1, [pc, #56]	; (800114c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001114:	4a0e      	ldr	r2, [pc, #56]	; (8001150 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001118:	e002      	b.n	8001120 <LoopCopyDataInit>

0800111a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800111c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111e:	3304      	adds	r3, #4

08001120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001124:	d3f9      	bcc.n	800111a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001126:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001128:	4c0b      	ldr	r4, [pc, #44]	; (8001158 <LoopFillZerobss+0x26>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800112c:	e001      	b.n	8001132 <LoopFillZerobss>

0800112e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001130:	3204      	adds	r2, #4

08001132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001134:	d3fb      	bcc.n	800112e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001136:	f7ff ffd7 	bl	80010e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800113a:	f002 fb3d 	bl	80037b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800113e:	f7ff fb0f 	bl	8000760 <main>
  bx  lr    
 8001142:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001144:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001148:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800114c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001150:	08003850 	.word	0x08003850
  ldr r2, =_sbss
 8001154:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001158:	20000148 	.word	0x20000148

0800115c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800115c:	e7fe      	b.n	800115c <ADC_IRQHandler>
	...

08001160 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001164:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <HAL_Init+0x40>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a0d      	ldr	r2, [pc, #52]	; (80011a0 <HAL_Init+0x40>)
 800116a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800116e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001170:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <HAL_Init+0x40>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a0a      	ldr	r2, [pc, #40]	; (80011a0 <HAL_Init+0x40>)
 8001176:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800117a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800117c:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <HAL_Init+0x40>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a07      	ldr	r2, [pc, #28]	; (80011a0 <HAL_Init+0x40>)
 8001182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001186:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001188:	2003      	movs	r0, #3
 800118a:	f000 f931 	bl	80013f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800118e:	200f      	movs	r0, #15
 8001190:	f000 f808 	bl	80011a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001194:	f7ff fe38 	bl	8000e08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40023c00 	.word	0x40023c00

080011a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <HAL_InitTick+0x54>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <HAL_InitTick+0x58>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	4619      	mov	r1, r3
 80011b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80011be:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 f93b 	bl	800143e <HAL_SYSTICK_Config>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e00e      	b.n	80011f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b0f      	cmp	r3, #15
 80011d6:	d80a      	bhi.n	80011ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d8:	2200      	movs	r2, #0
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	f04f 30ff 	mov.w	r0, #4294967295
 80011e0:	f000 f911 	bl	8001406 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e4:	4a06      	ldr	r2, [pc, #24]	; (8001200 <HAL_InitTick+0x5c>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ea:	2300      	movs	r3, #0
 80011ec:	e000      	b.n	80011f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000000 	.word	0x20000000
 80011fc:	20000008 	.word	0x20000008
 8001200:	20000004 	.word	0x20000004

08001204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <HAL_IncTick+0x20>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	461a      	mov	r2, r3
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <HAL_IncTick+0x24>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4413      	add	r3, r2
 8001214:	4a04      	ldr	r2, [pc, #16]	; (8001228 <HAL_IncTick+0x24>)
 8001216:	6013      	str	r3, [r2, #0]
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20000008 	.word	0x20000008
 8001228:	20000144 	.word	0x20000144

0800122c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return uwTick;
 8001230:	4b03      	ldr	r3, [pc, #12]	; (8001240 <HAL_GetTick+0x14>)
 8001232:	681b      	ldr	r3, [r3, #0]
}
 8001234:	4618      	mov	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000144 	.word	0x20000144

08001244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800124c:	f7ff ffee 	bl	800122c <HAL_GetTick>
 8001250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800125c:	d005      	beq.n	800126a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800125e:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <HAL_Delay+0x44>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	461a      	mov	r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4413      	add	r3, r2
 8001268:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800126a:	bf00      	nop
 800126c:	f7ff ffde 	bl	800122c <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	429a      	cmp	r2, r3
 800127a:	d8f7      	bhi.n	800126c <HAL_Delay+0x28>
  {
  }
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000008 	.word	0x20000008

0800128c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800129c:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <__NVIC_SetPriorityGrouping+0x44>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012a8:	4013      	ands	r3, r2
 80012aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012be:	4a04      	ldr	r2, [pc, #16]	; (80012d0 <__NVIC_SetPriorityGrouping+0x44>)
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	60d3      	str	r3, [r2, #12]
}
 80012c4:	bf00      	nop
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d8:	4b04      	ldr	r3, [pc, #16]	; (80012ec <__NVIC_GetPriorityGrouping+0x18>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	0a1b      	lsrs	r3, r3, #8
 80012de:	f003 0307 	and.w	r3, r3, #7
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	6039      	str	r1, [r7, #0]
 80012fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001300:	2b00      	cmp	r3, #0
 8001302:	db0a      	blt.n	800131a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	490c      	ldr	r1, [pc, #48]	; (800133c <__NVIC_SetPriority+0x4c>)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	0112      	lsls	r2, r2, #4
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	440b      	add	r3, r1
 8001314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001318:	e00a      	b.n	8001330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4908      	ldr	r1, [pc, #32]	; (8001340 <__NVIC_SetPriority+0x50>)
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	3b04      	subs	r3, #4
 8001328:	0112      	lsls	r2, r2, #4
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	440b      	add	r3, r1
 800132e:	761a      	strb	r2, [r3, #24]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000e100 	.word	0xe000e100
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001344:	b480      	push	{r7}
 8001346:	b089      	sub	sp, #36	; 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f1c3 0307 	rsb	r3, r3, #7
 800135e:	2b04      	cmp	r3, #4
 8001360:	bf28      	it	cs
 8001362:	2304      	movcs	r3, #4
 8001364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3304      	adds	r3, #4
 800136a:	2b06      	cmp	r3, #6
 800136c:	d902      	bls.n	8001374 <NVIC_EncodePriority+0x30>
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3b03      	subs	r3, #3
 8001372:	e000      	b.n	8001376 <NVIC_EncodePriority+0x32>
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	f04f 32ff 	mov.w	r2, #4294967295
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43da      	mvns	r2, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	401a      	ands	r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800138c:	f04f 31ff 	mov.w	r1, #4294967295
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	fa01 f303 	lsl.w	r3, r1, r3
 8001396:	43d9      	mvns	r1, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	4313      	orrs	r3, r2
         );
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3724      	adds	r7, #36	; 0x24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013bc:	d301      	bcc.n	80013c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013be:	2301      	movs	r3, #1
 80013c0:	e00f      	b.n	80013e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013c2:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <SysTick_Config+0x40>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ca:	210f      	movs	r1, #15
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295
 80013d0:	f7ff ff8e 	bl	80012f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d4:	4b05      	ldr	r3, [pc, #20]	; (80013ec <SysTick_Config+0x40>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013da:	4b04      	ldr	r3, [pc, #16]	; (80013ec <SysTick_Config+0x40>)
 80013dc:	2207      	movs	r2, #7
 80013de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	e000e010 	.word	0xe000e010

080013f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff ff47 	bl	800128c <__NVIC_SetPriorityGrouping>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001406:	b580      	push	{r7, lr}
 8001408:	b086      	sub	sp, #24
 800140a:	af00      	add	r7, sp, #0
 800140c:	4603      	mov	r3, r0
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	607a      	str	r2, [r7, #4]
 8001412:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001418:	f7ff ff5c 	bl	80012d4 <__NVIC_GetPriorityGrouping>
 800141c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	68b9      	ldr	r1, [r7, #8]
 8001422:	6978      	ldr	r0, [r7, #20]
 8001424:	f7ff ff8e 	bl	8001344 <NVIC_EncodePriority>
 8001428:	4602      	mov	r2, r0
 800142a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142e:	4611      	mov	r1, r2
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff5d 	bl	80012f0 <__NVIC_SetPriority>
}
 8001436:	bf00      	nop
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff ffb0 	bl	80013ac <SysTick_Config>
 800144c:	4603      	mov	r3, r0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
	...

08001458 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001458:	b480      	push	{r7}
 800145a:	b089      	sub	sp, #36	; 0x24
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800146a:	2300      	movs	r3, #0
 800146c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
 8001472:	e159      	b.n	8001728 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001474:	2201      	movs	r2, #1
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	697a      	ldr	r2, [r7, #20]
 8001484:	4013      	ands	r3, r2
 8001486:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	429a      	cmp	r2, r3
 800148e:	f040 8148 	bne.w	8001722 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f003 0303 	and.w	r3, r3, #3
 800149a:	2b01      	cmp	r3, #1
 800149c:	d005      	beq.n	80014aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d130      	bne.n	800150c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	2203      	movs	r2, #3
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4013      	ands	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	68da      	ldr	r2, [r3, #12]
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014e0:	2201      	movs	r2, #1
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	091b      	lsrs	r3, r3, #4
 80014f6:	f003 0201 	and.w	r2, r3, #1
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f003 0303 	and.w	r3, r3, #3
 8001514:	2b03      	cmp	r3, #3
 8001516:	d017      	beq.n	8001548 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	2203      	movs	r2, #3
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4313      	orrs	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 0303 	and.w	r3, r3, #3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d123      	bne.n	800159c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	08da      	lsrs	r2, r3, #3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3208      	adds	r2, #8
 800155c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001560:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	220f      	movs	r2, #15
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4013      	ands	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	691a      	ldr	r2, [r3, #16]
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	08da      	lsrs	r2, r3, #3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	3208      	adds	r2, #8
 8001596:	69b9      	ldr	r1, [r7, #24]
 8001598:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	2203      	movs	r2, #3
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	43db      	mvns	r3, r3
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4013      	ands	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 0203 	and.w	r2, r3, #3
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f000 80a2 	beq.w	8001722 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	4b57      	ldr	r3, [pc, #348]	; (8001740 <HAL_GPIO_Init+0x2e8>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	4a56      	ldr	r2, [pc, #344]	; (8001740 <HAL_GPIO_Init+0x2e8>)
 80015e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ec:	6453      	str	r3, [r2, #68]	; 0x44
 80015ee:	4b54      	ldr	r3, [pc, #336]	; (8001740 <HAL_GPIO_Init+0x2e8>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015fa:	4a52      	ldr	r2, [pc, #328]	; (8001744 <HAL_GPIO_Init+0x2ec>)
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	089b      	lsrs	r3, r3, #2
 8001600:	3302      	adds	r3, #2
 8001602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001606:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f003 0303 	and.w	r3, r3, #3
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	220f      	movs	r2, #15
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43db      	mvns	r3, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4013      	ands	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a49      	ldr	r2, [pc, #292]	; (8001748 <HAL_GPIO_Init+0x2f0>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d019      	beq.n	800165a <HAL_GPIO_Init+0x202>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a48      	ldr	r2, [pc, #288]	; (800174c <HAL_GPIO_Init+0x2f4>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d013      	beq.n	8001656 <HAL_GPIO_Init+0x1fe>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a47      	ldr	r2, [pc, #284]	; (8001750 <HAL_GPIO_Init+0x2f8>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d00d      	beq.n	8001652 <HAL_GPIO_Init+0x1fa>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a46      	ldr	r2, [pc, #280]	; (8001754 <HAL_GPIO_Init+0x2fc>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d007      	beq.n	800164e <HAL_GPIO_Init+0x1f6>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a45      	ldr	r2, [pc, #276]	; (8001758 <HAL_GPIO_Init+0x300>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d101      	bne.n	800164a <HAL_GPIO_Init+0x1f2>
 8001646:	2304      	movs	r3, #4
 8001648:	e008      	b.n	800165c <HAL_GPIO_Init+0x204>
 800164a:	2307      	movs	r3, #7
 800164c:	e006      	b.n	800165c <HAL_GPIO_Init+0x204>
 800164e:	2303      	movs	r3, #3
 8001650:	e004      	b.n	800165c <HAL_GPIO_Init+0x204>
 8001652:	2302      	movs	r3, #2
 8001654:	e002      	b.n	800165c <HAL_GPIO_Init+0x204>
 8001656:	2301      	movs	r3, #1
 8001658:	e000      	b.n	800165c <HAL_GPIO_Init+0x204>
 800165a:	2300      	movs	r3, #0
 800165c:	69fa      	ldr	r2, [r7, #28]
 800165e:	f002 0203 	and.w	r2, r2, #3
 8001662:	0092      	lsls	r2, r2, #2
 8001664:	4093      	lsls	r3, r2
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4313      	orrs	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800166c:	4935      	ldr	r1, [pc, #212]	; (8001744 <HAL_GPIO_Init+0x2ec>)
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	089b      	lsrs	r3, r3, #2
 8001672:	3302      	adds	r3, #2
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800167a:	4b38      	ldr	r3, [pc, #224]	; (800175c <HAL_GPIO_Init+0x304>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	43db      	mvns	r3, r3
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4013      	ands	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	4313      	orrs	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800169e:	4a2f      	ldr	r2, [pc, #188]	; (800175c <HAL_GPIO_Init+0x304>)
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016a4:	4b2d      	ldr	r3, [pc, #180]	; (800175c <HAL_GPIO_Init+0x304>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	43db      	mvns	r3, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4013      	ands	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d003      	beq.n	80016c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016c8:	4a24      	ldr	r2, [pc, #144]	; (800175c <HAL_GPIO_Init+0x304>)
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016ce:	4b23      	ldr	r3, [pc, #140]	; (800175c <HAL_GPIO_Init+0x304>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	43db      	mvns	r3, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4013      	ands	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016f2:	4a1a      	ldr	r2, [pc, #104]	; (800175c <HAL_GPIO_Init+0x304>)
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016f8:	4b18      	ldr	r3, [pc, #96]	; (800175c <HAL_GPIO_Init+0x304>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	43db      	mvns	r3, r3
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4013      	ands	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d003      	beq.n	800171c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	4313      	orrs	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800171c:	4a0f      	ldr	r2, [pc, #60]	; (800175c <HAL_GPIO_Init+0x304>)
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	3301      	adds	r3, #1
 8001726:	61fb      	str	r3, [r7, #28]
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	2b0f      	cmp	r3, #15
 800172c:	f67f aea2 	bls.w	8001474 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001730:	bf00      	nop
 8001732:	bf00      	nop
 8001734:	3724      	adds	r7, #36	; 0x24
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	40023800 	.word	0x40023800
 8001744:	40013800 	.word	0x40013800
 8001748:	40020000 	.word	0x40020000
 800174c:	40020400 	.word	0x40020400
 8001750:	40020800 	.word	0x40020800
 8001754:	40020c00 	.word	0x40020c00
 8001758:	40021000 	.word	0x40021000
 800175c:	40013c00 	.word	0x40013c00

08001760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	807b      	strh	r3, [r7, #2]
 800176c:	4613      	mov	r3, r2
 800176e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001770:	787b      	ldrb	r3, [r7, #1]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001776:	887a      	ldrh	r2, [r7, #2]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800177c:	e003      	b.n	8001786 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800177e:	887b      	ldrh	r3, [r7, #2]
 8001780:	041a      	lsls	r2, r3, #16
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	619a      	str	r2, [r3, #24]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001792:	b480      	push	{r7}
 8001794:	b085      	sub	sp, #20
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	460b      	mov	r3, r1
 800179c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017a4:	887a      	ldrh	r2, [r7, #2]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	4013      	ands	r3, r2
 80017aa:	041a      	lsls	r2, r3, #16
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	43d9      	mvns	r1, r3
 80017b0:	887b      	ldrh	r3, [r7, #2]
 80017b2:	400b      	ands	r3, r1
 80017b4:	431a      	orrs	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	619a      	str	r2, [r3, #24]
}
 80017ba:	bf00      	nop
 80017bc:	3714      	adds	r7, #20
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
	...

080017c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e267      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d075      	beq.n	80018d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017e6:	4b88      	ldr	r3, [pc, #544]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 030c 	and.w	r3, r3, #12
 80017ee:	2b04      	cmp	r3, #4
 80017f0:	d00c      	beq.n	800180c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017f2:	4b85      	ldr	r3, [pc, #532]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017fa:	2b08      	cmp	r3, #8
 80017fc:	d112      	bne.n	8001824 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017fe:	4b82      	ldr	r3, [pc, #520]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001806:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800180a:	d10b      	bne.n	8001824 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800180c:	4b7e      	ldr	r3, [pc, #504]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d05b      	beq.n	80018d0 <HAL_RCC_OscConfig+0x108>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d157      	bne.n	80018d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e242      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800182c:	d106      	bne.n	800183c <HAL_RCC_OscConfig+0x74>
 800182e:	4b76      	ldr	r3, [pc, #472]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a75      	ldr	r2, [pc, #468]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 8001834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	e01d      	b.n	8001878 <HAL_RCC_OscConfig+0xb0>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001844:	d10c      	bne.n	8001860 <HAL_RCC_OscConfig+0x98>
 8001846:	4b70      	ldr	r3, [pc, #448]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a6f      	ldr	r2, [pc, #444]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 800184c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	4b6d      	ldr	r3, [pc, #436]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a6c      	ldr	r2, [pc, #432]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 8001858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	e00b      	b.n	8001878 <HAL_RCC_OscConfig+0xb0>
 8001860:	4b69      	ldr	r3, [pc, #420]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a68      	ldr	r2, [pc, #416]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 8001866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	4b66      	ldr	r3, [pc, #408]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a65      	ldr	r2, [pc, #404]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 8001872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d013      	beq.n	80018a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001880:	f7ff fcd4 	bl	800122c <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001888:	f7ff fcd0 	bl	800122c <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b64      	cmp	r3, #100	; 0x64
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e207      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189a:	4b5b      	ldr	r3, [pc, #364]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d0f0      	beq.n	8001888 <HAL_RCC_OscConfig+0xc0>
 80018a6:	e014      	b.n	80018d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a8:	f7ff fcc0 	bl	800122c <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018b0:	f7ff fcbc 	bl	800122c <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b64      	cmp	r3, #100	; 0x64
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e1f3      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018c2:	4b51      	ldr	r3, [pc, #324]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1f0      	bne.n	80018b0 <HAL_RCC_OscConfig+0xe8>
 80018ce:	e000      	b.n	80018d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d063      	beq.n	80019a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018de:	4b4a      	ldr	r3, [pc, #296]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 030c 	and.w	r3, r3, #12
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00b      	beq.n	8001902 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018ea:	4b47      	ldr	r3, [pc, #284]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018f2:	2b08      	cmp	r3, #8
 80018f4:	d11c      	bne.n	8001930 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018f6:	4b44      	ldr	r3, [pc, #272]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d116      	bne.n	8001930 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001902:	4b41      	ldr	r3, [pc, #260]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d005      	beq.n	800191a <HAL_RCC_OscConfig+0x152>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d001      	beq.n	800191a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e1c7      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800191a:	4b3b      	ldr	r3, [pc, #236]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	4937      	ldr	r1, [pc, #220]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 800192a:	4313      	orrs	r3, r2
 800192c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800192e:	e03a      	b.n	80019a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d020      	beq.n	800197a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001938:	4b34      	ldr	r3, [pc, #208]	; (8001a0c <HAL_RCC_OscConfig+0x244>)
 800193a:	2201      	movs	r2, #1
 800193c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193e:	f7ff fc75 	bl	800122c <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001946:	f7ff fc71 	bl	800122c <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e1a8      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001958:	4b2b      	ldr	r3, [pc, #172]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0f0      	beq.n	8001946 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001964:	4b28      	ldr	r3, [pc, #160]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	4925      	ldr	r1, [pc, #148]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 8001974:	4313      	orrs	r3, r2
 8001976:	600b      	str	r3, [r1, #0]
 8001978:	e015      	b.n	80019a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800197a:	4b24      	ldr	r3, [pc, #144]	; (8001a0c <HAL_RCC_OscConfig+0x244>)
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001980:	f7ff fc54 	bl	800122c <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001988:	f7ff fc50 	bl	800122c <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e187      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800199a:	4b1b      	ldr	r3, [pc, #108]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f0      	bne.n	8001988 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0308 	and.w	r3, r3, #8
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d036      	beq.n	8001a20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d016      	beq.n	80019e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <HAL_RCC_OscConfig+0x248>)
 80019bc:	2201      	movs	r2, #1
 80019be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c0:	f7ff fc34 	bl	800122c <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019c8:	f7ff fc30 	bl	800122c <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e167      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019da:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <HAL_RCC_OscConfig+0x240>)
 80019dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0f0      	beq.n	80019c8 <HAL_RCC_OscConfig+0x200>
 80019e6:	e01b      	b.n	8001a20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019e8:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <HAL_RCC_OscConfig+0x248>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ee:	f7ff fc1d 	bl	800122c <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f4:	e00e      	b.n	8001a14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019f6:	f7ff fc19 	bl	800122c <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d907      	bls.n	8001a14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e150      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	42470000 	.word	0x42470000
 8001a10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a14:	4b88      	ldr	r3, [pc, #544]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001a16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1ea      	bne.n	80019f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f000 8097 	beq.w	8001b5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a32:	4b81      	ldr	r3, [pc, #516]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d10f      	bne.n	8001a5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60bb      	str	r3, [r7, #8]
 8001a42:	4b7d      	ldr	r3, [pc, #500]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	4a7c      	ldr	r2, [pc, #496]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a4e:	4b7a      	ldr	r3, [pc, #488]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a56:	60bb      	str	r3, [r7, #8]
 8001a58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a5e:	4b77      	ldr	r3, [pc, #476]	; (8001c3c <HAL_RCC_OscConfig+0x474>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d118      	bne.n	8001a9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a6a:	4b74      	ldr	r3, [pc, #464]	; (8001c3c <HAL_RCC_OscConfig+0x474>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a73      	ldr	r2, [pc, #460]	; (8001c3c <HAL_RCC_OscConfig+0x474>)
 8001a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a76:	f7ff fbd9 	bl	800122c <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a7e:	f7ff fbd5 	bl	800122c <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e10c      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a90:	4b6a      	ldr	r3, [pc, #424]	; (8001c3c <HAL_RCC_OscConfig+0x474>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0f0      	beq.n	8001a7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d106      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x2ea>
 8001aa4:	4b64      	ldr	r3, [pc, #400]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa8:	4a63      	ldr	r2, [pc, #396]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	6713      	str	r3, [r2, #112]	; 0x70
 8001ab0:	e01c      	b.n	8001aec <HAL_RCC_OscConfig+0x324>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	2b05      	cmp	r3, #5
 8001ab8:	d10c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x30c>
 8001aba:	4b5f      	ldr	r3, [pc, #380]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001abe:	4a5e      	ldr	r2, [pc, #376]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001ac0:	f043 0304 	orr.w	r3, r3, #4
 8001ac4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ac6:	4b5c      	ldr	r3, [pc, #368]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aca:	4a5b      	ldr	r2, [pc, #364]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ad2:	e00b      	b.n	8001aec <HAL_RCC_OscConfig+0x324>
 8001ad4:	4b58      	ldr	r3, [pc, #352]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad8:	4a57      	ldr	r2, [pc, #348]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001ada:	f023 0301 	bic.w	r3, r3, #1
 8001ade:	6713      	str	r3, [r2, #112]	; 0x70
 8001ae0:	4b55      	ldr	r3, [pc, #340]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae4:	4a54      	ldr	r2, [pc, #336]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001ae6:	f023 0304 	bic.w	r3, r3, #4
 8001aea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d015      	beq.n	8001b20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af4:	f7ff fb9a 	bl	800122c <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001afa:	e00a      	b.n	8001b12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001afc:	f7ff fb96 	bl	800122c <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e0cb      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b12:	4b49      	ldr	r3, [pc, #292]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0ee      	beq.n	8001afc <HAL_RCC_OscConfig+0x334>
 8001b1e:	e014      	b.n	8001b4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b20:	f7ff fb84 	bl	800122c <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b26:	e00a      	b.n	8001b3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b28:	f7ff fb80 	bl	800122c <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e0b5      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b3e:	4b3e      	ldr	r3, [pc, #248]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1ee      	bne.n	8001b28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b4a:	7dfb      	ldrb	r3, [r7, #23]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d105      	bne.n	8001b5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b50:	4b39      	ldr	r3, [pc, #228]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	4a38      	ldr	r2, [pc, #224]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001b56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 80a1 	beq.w	8001ca8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b66:	4b34      	ldr	r3, [pc, #208]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 030c 	and.w	r3, r3, #12
 8001b6e:	2b08      	cmp	r3, #8
 8001b70:	d05c      	beq.n	8001c2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d141      	bne.n	8001bfe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b7a:	4b31      	ldr	r3, [pc, #196]	; (8001c40 <HAL_RCC_OscConfig+0x478>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b80:	f7ff fb54 	bl	800122c <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b88:	f7ff fb50 	bl	800122c <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e087      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b9a:	4b27      	ldr	r3, [pc, #156]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69da      	ldr	r2, [r3, #28]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb4:	019b      	lsls	r3, r3, #6
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bbc:	085b      	lsrs	r3, r3, #1
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	041b      	lsls	r3, r3, #16
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc8:	061b      	lsls	r3, r3, #24
 8001bca:	491b      	ldr	r1, [pc, #108]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bd0:	4b1b      	ldr	r3, [pc, #108]	; (8001c40 <HAL_RCC_OscConfig+0x478>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd6:	f7ff fb29 	bl	800122c <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bde:	f7ff fb25 	bl	800122c <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e05c      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bf0:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d0f0      	beq.n	8001bde <HAL_RCC_OscConfig+0x416>
 8001bfc:	e054      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <HAL_RCC_OscConfig+0x478>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c04:	f7ff fb12 	bl	800122c <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c0c:	f7ff fb0e 	bl	800122c <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e045      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <HAL_RCC_OscConfig+0x470>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f0      	bne.n	8001c0c <HAL_RCC_OscConfig+0x444>
 8001c2a:	e03d      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d107      	bne.n	8001c44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e038      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	40007000 	.word	0x40007000
 8001c40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c44:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <HAL_RCC_OscConfig+0x4ec>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d028      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d121      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d11a      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c74:	4013      	ands	r3, r2
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d111      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8a:	085b      	lsrs	r3, r3, #1
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d107      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d001      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e000      	b.n	8001caa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3718      	adds	r7, #24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40023800 	.word	0x40023800

08001cb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e0cc      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ccc:	4b68      	ldr	r3, [pc, #416]	; (8001e70 <HAL_RCC_ClockConfig+0x1b8>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d90c      	bls.n	8001cf4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cda:	4b65      	ldr	r3, [pc, #404]	; (8001e70 <HAL_RCC_ClockConfig+0x1b8>)
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce2:	4b63      	ldr	r3, [pc, #396]	; (8001e70 <HAL_RCC_ClockConfig+0x1b8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d001      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e0b8      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d020      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d005      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d0c:	4b59      	ldr	r3, [pc, #356]	; (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	4a58      	ldr	r2, [pc, #352]	; (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001d12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0308 	and.w	r3, r3, #8
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d005      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d24:	4b53      	ldr	r3, [pc, #332]	; (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	4a52      	ldr	r2, [pc, #328]	; (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d30:	4b50      	ldr	r3, [pc, #320]	; (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	494d      	ldr	r1, [pc, #308]	; (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d044      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d107      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d56:	4b47      	ldr	r3, [pc, #284]	; (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d119      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e07f      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d003      	beq.n	8001d76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d72:	2b03      	cmp	r3, #3
 8001d74:	d107      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d76:	4b3f      	ldr	r3, [pc, #252]	; (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d109      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e06f      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d86:	4b3b      	ldr	r3, [pc, #236]	; (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e067      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d96:	4b37      	ldr	r3, [pc, #220]	; (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f023 0203 	bic.w	r2, r3, #3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	4934      	ldr	r1, [pc, #208]	; (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001da8:	f7ff fa40 	bl	800122c <HAL_GetTick>
 8001dac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dae:	e00a      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db0:	f7ff fa3c 	bl	800122c <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e04f      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc6:	4b2b      	ldr	r3, [pc, #172]	; (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 020c 	and.w	r2, r3, #12
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d1eb      	bne.n	8001db0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dd8:	4b25      	ldr	r3, [pc, #148]	; (8001e70 <HAL_RCC_ClockConfig+0x1b8>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d20c      	bcs.n	8001e00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de6:	4b22      	ldr	r3, [pc, #136]	; (8001e70 <HAL_RCC_ClockConfig+0x1b8>)
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dee:	4b20      	ldr	r3, [pc, #128]	; (8001e70 <HAL_RCC_ClockConfig+0x1b8>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d001      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e032      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d008      	beq.n	8001e1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e0c:	4b19      	ldr	r3, [pc, #100]	; (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	4916      	ldr	r1, [pc, #88]	; (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d009      	beq.n	8001e3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e2a:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	490e      	ldr	r1, [pc, #56]	; (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e3e:	f000 f821 	bl	8001e84 <HAL_RCC_GetSysClockFreq>
 8001e42:	4602      	mov	r2, r0
 8001e44:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <HAL_RCC_ClockConfig+0x1bc>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	091b      	lsrs	r3, r3, #4
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	490a      	ldr	r1, [pc, #40]	; (8001e78 <HAL_RCC_ClockConfig+0x1c0>)
 8001e50:	5ccb      	ldrb	r3, [r1, r3]
 8001e52:	fa22 f303 	lsr.w	r3, r2, r3
 8001e56:	4a09      	ldr	r2, [pc, #36]	; (8001e7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e5a:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <HAL_RCC_ClockConfig+0x1c8>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff f9a0 	bl	80011a4 <HAL_InitTick>

  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40023c00 	.word	0x40023c00
 8001e74:	40023800 	.word	0x40023800
 8001e78:	08003828 	.word	0x08003828
 8001e7c:	20000000 	.word	0x20000000
 8001e80:	20000004 	.word	0x20000004

08001e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e88:	b090      	sub	sp, #64	; 0x40
 8001e8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	637b      	str	r3, [r7, #52]	; 0x34
 8001e90:	2300      	movs	r3, #0
 8001e92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e94:	2300      	movs	r3, #0
 8001e96:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e9c:	4b59      	ldr	r3, [pc, #356]	; (8002004 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 030c 	and.w	r3, r3, #12
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d00d      	beq.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x40>
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	f200 80a1 	bhi.w	8001ff0 <HAL_RCC_GetSysClockFreq+0x16c>
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d002      	beq.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x34>
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	d003      	beq.n	8001ebe <HAL_RCC_GetSysClockFreq+0x3a>
 8001eb6:	e09b      	b.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001eb8:	4b53      	ldr	r3, [pc, #332]	; (8002008 <HAL_RCC_GetSysClockFreq+0x184>)
 8001eba:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001ebc:	e09b      	b.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ebe:	4b53      	ldr	r3, [pc, #332]	; (800200c <HAL_RCC_GetSysClockFreq+0x188>)
 8001ec0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ec2:	e098      	b.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ec4:	4b4f      	ldr	r3, [pc, #316]	; (8002004 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ecc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ece:	4b4d      	ldr	r3, [pc, #308]	; (8002004 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d028      	beq.n	8001f2c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eda:	4b4a      	ldr	r3, [pc, #296]	; (8002004 <HAL_RCC_GetSysClockFreq+0x180>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	099b      	lsrs	r3, r3, #6
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	623b      	str	r3, [r7, #32]
 8001ee4:	627a      	str	r2, [r7, #36]	; 0x24
 8001ee6:	6a3b      	ldr	r3, [r7, #32]
 8001ee8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001eec:	2100      	movs	r1, #0
 8001eee:	4b47      	ldr	r3, [pc, #284]	; (800200c <HAL_RCC_GetSysClockFreq+0x188>)
 8001ef0:	fb03 f201 	mul.w	r2, r3, r1
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	fb00 f303 	mul.w	r3, r0, r3
 8001efa:	4413      	add	r3, r2
 8001efc:	4a43      	ldr	r2, [pc, #268]	; (800200c <HAL_RCC_GetSysClockFreq+0x188>)
 8001efe:	fba0 1202 	umull	r1, r2, r0, r2
 8001f02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f04:	460a      	mov	r2, r1
 8001f06:	62ba      	str	r2, [r7, #40]	; 0x28
 8001f08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f0a:	4413      	add	r3, r2
 8001f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f10:	2200      	movs	r2, #0
 8001f12:	61bb      	str	r3, [r7, #24]
 8001f14:	61fa      	str	r2, [r7, #28]
 8001f16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f1e:	f7fe f959 	bl	80001d4 <__aeabi_uldivmod>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4613      	mov	r3, r2
 8001f28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f2a:	e053      	b.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f2c:	4b35      	ldr	r3, [pc, #212]	; (8002004 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	099b      	lsrs	r3, r3, #6
 8001f32:	2200      	movs	r2, #0
 8001f34:	613b      	str	r3, [r7, #16]
 8001f36:	617a      	str	r2, [r7, #20]
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001f3e:	f04f 0b00 	mov.w	fp, #0
 8001f42:	4652      	mov	r2, sl
 8001f44:	465b      	mov	r3, fp
 8001f46:	f04f 0000 	mov.w	r0, #0
 8001f4a:	f04f 0100 	mov.w	r1, #0
 8001f4e:	0159      	lsls	r1, r3, #5
 8001f50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f54:	0150      	lsls	r0, r2, #5
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	ebb2 080a 	subs.w	r8, r2, sl
 8001f5e:	eb63 090b 	sbc.w	r9, r3, fp
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	f04f 0300 	mov.w	r3, #0
 8001f6a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001f6e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001f72:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001f76:	ebb2 0408 	subs.w	r4, r2, r8
 8001f7a:	eb63 0509 	sbc.w	r5, r3, r9
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	f04f 0300 	mov.w	r3, #0
 8001f86:	00eb      	lsls	r3, r5, #3
 8001f88:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f8c:	00e2      	lsls	r2, r4, #3
 8001f8e:	4614      	mov	r4, r2
 8001f90:	461d      	mov	r5, r3
 8001f92:	eb14 030a 	adds.w	r3, r4, sl
 8001f96:	603b      	str	r3, [r7, #0]
 8001f98:	eb45 030b 	adc.w	r3, r5, fp
 8001f9c:	607b      	str	r3, [r7, #4]
 8001f9e:	f04f 0200 	mov.w	r2, #0
 8001fa2:	f04f 0300 	mov.w	r3, #0
 8001fa6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001faa:	4629      	mov	r1, r5
 8001fac:	028b      	lsls	r3, r1, #10
 8001fae:	4621      	mov	r1, r4
 8001fb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fb4:	4621      	mov	r1, r4
 8001fb6:	028a      	lsls	r2, r1, #10
 8001fb8:	4610      	mov	r0, r2
 8001fba:	4619      	mov	r1, r3
 8001fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	60fa      	str	r2, [r7, #12]
 8001fc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fc8:	f7fe f904 	bl	80001d4 <__aeabi_uldivmod>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fd4:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	0c1b      	lsrs	r3, r3, #16
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	3301      	adds	r3, #1
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001fe4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001fee:	e002      	b.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ff0:	4b05      	ldr	r3, [pc, #20]	; (8002008 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ff2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ff4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3740      	adds	r7, #64	; 0x40
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002002:	bf00      	nop
 8002004:	40023800 	.word	0x40023800
 8002008:	00f42400 	.word	0x00f42400
 800200c:	017d7840 	.word	0x017d7840

08002010 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002014:	4b03      	ldr	r3, [pc, #12]	; (8002024 <HAL_RCC_GetHCLKFreq+0x14>)
 8002016:	681b      	ldr	r3, [r3, #0]
}
 8002018:	4618      	mov	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	20000000 	.word	0x20000000

08002028 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800202c:	f7ff fff0 	bl	8002010 <HAL_RCC_GetHCLKFreq>
 8002030:	4602      	mov	r2, r0
 8002032:	4b05      	ldr	r3, [pc, #20]	; (8002048 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	0a9b      	lsrs	r3, r3, #10
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	4903      	ldr	r1, [pc, #12]	; (800204c <HAL_RCC_GetPCLK1Freq+0x24>)
 800203e:	5ccb      	ldrb	r3, [r1, r3]
 8002040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002044:	4618      	mov	r0, r3
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40023800 	.word	0x40023800
 800204c:	08003838 	.word	0x08003838

08002050 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002054:	f7ff ffdc 	bl	8002010 <HAL_RCC_GetHCLKFreq>
 8002058:	4602      	mov	r2, r0
 800205a:	4b05      	ldr	r3, [pc, #20]	; (8002070 <HAL_RCC_GetPCLK2Freq+0x20>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	0b5b      	lsrs	r3, r3, #13
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	4903      	ldr	r1, [pc, #12]	; (8002074 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002066:	5ccb      	ldrb	r3, [r1, r3]
 8002068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800206c:	4618      	mov	r0, r3
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40023800 	.word	0x40023800
 8002074:	08003838 	.word	0x08003838

08002078 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e041      	b.n	800210e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d106      	bne.n	80020a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7fe feda 	bl	8000e58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2202      	movs	r2, #2
 80020a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3304      	adds	r3, #4
 80020b4:	4619      	mov	r1, r3
 80020b6:	4610      	mov	r0, r2
 80020b8:	f000 fb9c 	bl	80027f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d109      	bne.n	800213c <HAL_TIM_PWM_Start+0x24>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b01      	cmp	r3, #1
 8002132:	bf14      	ite	ne
 8002134:	2301      	movne	r3, #1
 8002136:	2300      	moveq	r3, #0
 8002138:	b2db      	uxtb	r3, r3
 800213a:	e022      	b.n	8002182 <HAL_TIM_PWM_Start+0x6a>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	2b04      	cmp	r3, #4
 8002140:	d109      	bne.n	8002156 <HAL_TIM_PWM_Start+0x3e>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b01      	cmp	r3, #1
 800214c:	bf14      	ite	ne
 800214e:	2301      	movne	r3, #1
 8002150:	2300      	moveq	r3, #0
 8002152:	b2db      	uxtb	r3, r3
 8002154:	e015      	b.n	8002182 <HAL_TIM_PWM_Start+0x6a>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	2b08      	cmp	r3, #8
 800215a:	d109      	bne.n	8002170 <HAL_TIM_PWM_Start+0x58>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b01      	cmp	r3, #1
 8002166:	bf14      	ite	ne
 8002168:	2301      	movne	r3, #1
 800216a:	2300      	moveq	r3, #0
 800216c:	b2db      	uxtb	r3, r3
 800216e:	e008      	b.n	8002182 <HAL_TIM_PWM_Start+0x6a>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b01      	cmp	r3, #1
 800217a:	bf14      	ite	ne
 800217c:	2301      	movne	r3, #1
 800217e:	2300      	moveq	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e068      	b.n	800225c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d104      	bne.n	800219a <HAL_TIM_PWM_Start+0x82>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2202      	movs	r2, #2
 8002194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002198:	e013      	b.n	80021c2 <HAL_TIM_PWM_Start+0xaa>
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	2b04      	cmp	r3, #4
 800219e:	d104      	bne.n	80021aa <HAL_TIM_PWM_Start+0x92>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2202      	movs	r2, #2
 80021a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021a8:	e00b      	b.n	80021c2 <HAL_TIM_PWM_Start+0xaa>
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d104      	bne.n	80021ba <HAL_TIM_PWM_Start+0xa2>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2202      	movs	r2, #2
 80021b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021b8:	e003      	b.n	80021c2 <HAL_TIM_PWM_Start+0xaa>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2202      	movs	r2, #2
 80021be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2201      	movs	r2, #1
 80021c8:	6839      	ldr	r1, [r7, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f000 ff4d 	bl	800306a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a23      	ldr	r2, [pc, #140]	; (8002264 <HAL_TIM_PWM_Start+0x14c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d107      	bne.n	80021ea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a1d      	ldr	r2, [pc, #116]	; (8002264 <HAL_TIM_PWM_Start+0x14c>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d018      	beq.n	8002226 <HAL_TIM_PWM_Start+0x10e>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021fc:	d013      	beq.n	8002226 <HAL_TIM_PWM_Start+0x10e>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a19      	ldr	r2, [pc, #100]	; (8002268 <HAL_TIM_PWM_Start+0x150>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d00e      	beq.n	8002226 <HAL_TIM_PWM_Start+0x10e>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a17      	ldr	r2, [pc, #92]	; (800226c <HAL_TIM_PWM_Start+0x154>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d009      	beq.n	8002226 <HAL_TIM_PWM_Start+0x10e>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a16      	ldr	r2, [pc, #88]	; (8002270 <HAL_TIM_PWM_Start+0x158>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d004      	beq.n	8002226 <HAL_TIM_PWM_Start+0x10e>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a14      	ldr	r2, [pc, #80]	; (8002274 <HAL_TIM_PWM_Start+0x15c>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d111      	bne.n	800224a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2b06      	cmp	r3, #6
 8002236:	d010      	beq.n	800225a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f042 0201 	orr.w	r2, r2, #1
 8002246:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002248:	e007      	b.n	800225a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f042 0201 	orr.w	r2, r2, #1
 8002258:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40010000 	.word	0x40010000
 8002268:	40000400 	.word	0x40000400
 800226c:	40000800 	.word	0x40000800
 8002270:	40000c00 	.word	0x40000c00
 8002274:	40014000 	.word	0x40014000

08002278 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e041      	b.n	800230e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d106      	bne.n	80022a4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7fe fdfc 	bl	8000e9c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2202      	movs	r2, #2
 80022a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3304      	adds	r3, #4
 80022b4:	4619      	mov	r1, r3
 80022b6:	4610      	mov	r0, r2
 80022b8:	f000 fa9c 	bl	80027f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
	...

08002318 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d104      	bne.n	8002332 <HAL_TIM_IC_Start+0x1a>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800232e:	b2db      	uxtb	r3, r3
 8002330:	e013      	b.n	800235a <HAL_TIM_IC_Start+0x42>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2b04      	cmp	r3, #4
 8002336:	d104      	bne.n	8002342 <HAL_TIM_IC_Start+0x2a>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800233e:	b2db      	uxtb	r3, r3
 8002340:	e00b      	b.n	800235a <HAL_TIM_IC_Start+0x42>
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	2b08      	cmp	r3, #8
 8002346:	d104      	bne.n	8002352 <HAL_TIM_IC_Start+0x3a>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800234e:	b2db      	uxtb	r3, r3
 8002350:	e003      	b.n	800235a <HAL_TIM_IC_Start+0x42>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002358:	b2db      	uxtb	r3, r3
 800235a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d104      	bne.n	800236c <HAL_TIM_IC_Start+0x54>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002368:	b2db      	uxtb	r3, r3
 800236a:	e013      	b.n	8002394 <HAL_TIM_IC_Start+0x7c>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	2b04      	cmp	r3, #4
 8002370:	d104      	bne.n	800237c <HAL_TIM_IC_Start+0x64>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002378:	b2db      	uxtb	r3, r3
 800237a:	e00b      	b.n	8002394 <HAL_TIM_IC_Start+0x7c>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	2b08      	cmp	r3, #8
 8002380:	d104      	bne.n	800238c <HAL_TIM_IC_Start+0x74>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002388:	b2db      	uxtb	r3, r3
 800238a:	e003      	b.n	8002394 <HAL_TIM_IC_Start+0x7c>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002392:	b2db      	uxtb	r3, r3
 8002394:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002396:	7bfb      	ldrb	r3, [r7, #15]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d102      	bne.n	80023a2 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800239c:	7bbb      	ldrb	r3, [r7, #14]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d001      	beq.n	80023a6 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e077      	b.n	8002496 <HAL_TIM_IC_Start+0x17e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d104      	bne.n	80023b6 <HAL_TIM_IC_Start+0x9e>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2202      	movs	r2, #2
 80023b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023b4:	e013      	b.n	80023de <HAL_TIM_IC_Start+0xc6>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	2b04      	cmp	r3, #4
 80023ba:	d104      	bne.n	80023c6 <HAL_TIM_IC_Start+0xae>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2202      	movs	r2, #2
 80023c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023c4:	e00b      	b.n	80023de <HAL_TIM_IC_Start+0xc6>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	d104      	bne.n	80023d6 <HAL_TIM_IC_Start+0xbe>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2202      	movs	r2, #2
 80023d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023d4:	e003      	b.n	80023de <HAL_TIM_IC_Start+0xc6>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2202      	movs	r2, #2
 80023da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d104      	bne.n	80023ee <HAL_TIM_IC_Start+0xd6>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2202      	movs	r2, #2
 80023e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023ec:	e013      	b.n	8002416 <HAL_TIM_IC_Start+0xfe>
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	d104      	bne.n	80023fe <HAL_TIM_IC_Start+0xe6>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2202      	movs	r2, #2
 80023f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023fc:	e00b      	b.n	8002416 <HAL_TIM_IC_Start+0xfe>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	2b08      	cmp	r3, #8
 8002402:	d104      	bne.n	800240e <HAL_TIM_IC_Start+0xf6>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2202      	movs	r2, #2
 8002408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800240c:	e003      	b.n	8002416 <HAL_TIM_IC_Start+0xfe>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2202      	movs	r2, #2
 8002412:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2201      	movs	r2, #1
 800241c:	6839      	ldr	r1, [r7, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f000 fe23 	bl	800306a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a1d      	ldr	r2, [pc, #116]	; (80024a0 <HAL_TIM_IC_Start+0x188>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d018      	beq.n	8002460 <HAL_TIM_IC_Start+0x148>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002436:	d013      	beq.n	8002460 <HAL_TIM_IC_Start+0x148>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a19      	ldr	r2, [pc, #100]	; (80024a4 <HAL_TIM_IC_Start+0x18c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d00e      	beq.n	8002460 <HAL_TIM_IC_Start+0x148>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a18      	ldr	r2, [pc, #96]	; (80024a8 <HAL_TIM_IC_Start+0x190>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d009      	beq.n	8002460 <HAL_TIM_IC_Start+0x148>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a16      	ldr	r2, [pc, #88]	; (80024ac <HAL_TIM_IC_Start+0x194>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d004      	beq.n	8002460 <HAL_TIM_IC_Start+0x148>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a15      	ldr	r2, [pc, #84]	; (80024b0 <HAL_TIM_IC_Start+0x198>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d111      	bne.n	8002484 <HAL_TIM_IC_Start+0x16c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	2b06      	cmp	r3, #6
 8002470:	d010      	beq.n	8002494 <HAL_TIM_IC_Start+0x17c>
    {
      __HAL_TIM_ENABLE(htim);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f042 0201 	orr.w	r2, r2, #1
 8002480:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002482:	e007      	b.n	8002494 <HAL_TIM_IC_Start+0x17c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 0201 	orr.w	r2, r2, #1
 8002492:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40010000 	.word	0x40010000
 80024a4:	40000400 	.word	0x40000400
 80024a8:	40000800 	.word	0x40000800
 80024ac:	40000c00 	.word	0x40000c00
 80024b0:	40014000 	.word	0x40014000

080024b4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024c0:	2300      	movs	r3, #0
 80024c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d101      	bne.n	80024d2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80024ce:	2302      	movs	r3, #2
 80024d0:	e088      	b.n	80025e4 <HAL_TIM_IC_ConfigChannel+0x130>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d11b      	bne.n	8002518 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6818      	ldr	r0, [r3, #0]
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	6819      	ldr	r1, [r3, #0]
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	f000 fc1e 	bl	8002d30 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	699a      	ldr	r2, [r3, #24]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 020c 	bic.w	r2, r2, #12
 8002502:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6999      	ldr	r1, [r3, #24]
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	619a      	str	r2, [r3, #24]
 8002516:	e060      	b.n	80025da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b04      	cmp	r3, #4
 800251c:	d11c      	bne.n	8002558 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6818      	ldr	r0, [r3, #0]
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	6819      	ldr	r1, [r3, #0]
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	f000 fc96 	bl	8002e5e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	699a      	ldr	r2, [r3, #24]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002540:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6999      	ldr	r1, [r3, #24]
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	021a      	lsls	r2, r3, #8
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	619a      	str	r2, [r3, #24]
 8002556:	e040      	b.n	80025da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b08      	cmp	r3, #8
 800255c:	d11b      	bne.n	8002596 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6818      	ldr	r0, [r3, #0]
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	6819      	ldr	r1, [r3, #0]
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	f000 fce3 	bl	8002f38 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	69da      	ldr	r2, [r3, #28]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 020c 	bic.w	r2, r2, #12
 8002580:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	69d9      	ldr	r1, [r3, #28]
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	61da      	str	r2, [r3, #28]
 8002594:	e021      	b.n	80025da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b0c      	cmp	r3, #12
 800259a:	d11c      	bne.n	80025d6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6818      	ldr	r0, [r3, #0]
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	6819      	ldr	r1, [r3, #0]
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	f000 fd00 	bl	8002fb0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	69da      	ldr	r2, [r3, #28]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80025be:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	69d9      	ldr	r1, [r3, #28]
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	021a      	lsls	r2, r3, #8
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	61da      	str	r2, [r3, #28]
 80025d4:	e001      	b.n	80025da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025f8:	2300      	movs	r3, #0
 80025fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002602:	2b01      	cmp	r3, #1
 8002604:	d101      	bne.n	800260a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002606:	2302      	movs	r3, #2
 8002608:	e0ae      	b.n	8002768 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b0c      	cmp	r3, #12
 8002616:	f200 809f 	bhi.w	8002758 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800261a:	a201      	add	r2, pc, #4	; (adr r2, 8002620 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800261c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002620:	08002655 	.word	0x08002655
 8002624:	08002759 	.word	0x08002759
 8002628:	08002759 	.word	0x08002759
 800262c:	08002759 	.word	0x08002759
 8002630:	08002695 	.word	0x08002695
 8002634:	08002759 	.word	0x08002759
 8002638:	08002759 	.word	0x08002759
 800263c:	08002759 	.word	0x08002759
 8002640:	080026d7 	.word	0x080026d7
 8002644:	08002759 	.word	0x08002759
 8002648:	08002759 	.word	0x08002759
 800264c:	08002759 	.word	0x08002759
 8002650:	08002717 	.word	0x08002717
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68b9      	ldr	r1, [r7, #8]
 800265a:	4618      	mov	r0, r3
 800265c:	f000 f94a 	bl	80028f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	699a      	ldr	r2, [r3, #24]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f042 0208 	orr.w	r2, r2, #8
 800266e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	699a      	ldr	r2, [r3, #24]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0204 	bic.w	r2, r2, #4
 800267e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6999      	ldr	r1, [r3, #24]
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	691a      	ldr	r2, [r3, #16]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	619a      	str	r2, [r3, #24]
      break;
 8002692:	e064      	b.n	800275e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68b9      	ldr	r1, [r7, #8]
 800269a:	4618      	mov	r0, r3
 800269c:	f000 f990 	bl	80029c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	699a      	ldr	r2, [r3, #24]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	699a      	ldr	r2, [r3, #24]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6999      	ldr	r1, [r3, #24]
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	021a      	lsls	r2, r3, #8
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	619a      	str	r2, [r3, #24]
      break;
 80026d4:	e043      	b.n	800275e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68b9      	ldr	r1, [r7, #8]
 80026dc:	4618      	mov	r0, r3
 80026de:	f000 f9db 	bl	8002a98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	69da      	ldr	r2, [r3, #28]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f042 0208 	orr.w	r2, r2, #8
 80026f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	69da      	ldr	r2, [r3, #28]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0204 	bic.w	r2, r2, #4
 8002700:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	69d9      	ldr	r1, [r3, #28]
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	691a      	ldr	r2, [r3, #16]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	430a      	orrs	r2, r1
 8002712:	61da      	str	r2, [r3, #28]
      break;
 8002714:	e023      	b.n	800275e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68b9      	ldr	r1, [r7, #8]
 800271c:	4618      	mov	r0, r3
 800271e:	f000 fa25 	bl	8002b6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	69da      	ldr	r2, [r3, #28]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002730:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	69da      	ldr	r2, [r3, #28]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002740:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	69d9      	ldr	r1, [r3, #28]
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	021a      	lsls	r2, r3, #8
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	61da      	str	r2, [r3, #28]
      break;
 8002756:	e002      	b.n	800275e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	75fb      	strb	r3, [r7, #23]
      break;
 800275c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002766:	7dfb      	ldrb	r3, [r7, #23]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002780:	2b01      	cmp	r3, #1
 8002782:	d101      	bne.n	8002788 <HAL_TIM_SlaveConfigSynchro+0x18>
 8002784:	2302      	movs	r3, #2
 8002786:	e031      	b.n	80027ec <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2202      	movs	r2, #2
 8002794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002798:	6839      	ldr	r1, [r7, #0]
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 fa36 	bl	8002c0c <TIM_SlaveTimer_SetConfig>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d009      	beq.n	80027ba <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e018      	b.n	80027ec <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68da      	ldr	r2, [r3, #12]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027c8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68da      	ldr	r2, [r3, #12]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80027d8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a34      	ldr	r2, [pc, #208]	; (80028d8 <TIM_Base_SetConfig+0xe4>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d00f      	beq.n	800282c <TIM_Base_SetConfig+0x38>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002812:	d00b      	beq.n	800282c <TIM_Base_SetConfig+0x38>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a31      	ldr	r2, [pc, #196]	; (80028dc <TIM_Base_SetConfig+0xe8>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d007      	beq.n	800282c <TIM_Base_SetConfig+0x38>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a30      	ldr	r2, [pc, #192]	; (80028e0 <TIM_Base_SetConfig+0xec>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d003      	beq.n	800282c <TIM_Base_SetConfig+0x38>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a2f      	ldr	r2, [pc, #188]	; (80028e4 <TIM_Base_SetConfig+0xf0>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d108      	bne.n	800283e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002832:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	4313      	orrs	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a25      	ldr	r2, [pc, #148]	; (80028d8 <TIM_Base_SetConfig+0xe4>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d01b      	beq.n	800287e <TIM_Base_SetConfig+0x8a>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800284c:	d017      	beq.n	800287e <TIM_Base_SetConfig+0x8a>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a22      	ldr	r2, [pc, #136]	; (80028dc <TIM_Base_SetConfig+0xe8>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d013      	beq.n	800287e <TIM_Base_SetConfig+0x8a>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a21      	ldr	r2, [pc, #132]	; (80028e0 <TIM_Base_SetConfig+0xec>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d00f      	beq.n	800287e <TIM_Base_SetConfig+0x8a>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a20      	ldr	r2, [pc, #128]	; (80028e4 <TIM_Base_SetConfig+0xf0>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d00b      	beq.n	800287e <TIM_Base_SetConfig+0x8a>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a1f      	ldr	r2, [pc, #124]	; (80028e8 <TIM_Base_SetConfig+0xf4>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d007      	beq.n	800287e <TIM_Base_SetConfig+0x8a>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a1e      	ldr	r2, [pc, #120]	; (80028ec <TIM_Base_SetConfig+0xf8>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d003      	beq.n	800287e <TIM_Base_SetConfig+0x8a>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a1d      	ldr	r2, [pc, #116]	; (80028f0 <TIM_Base_SetConfig+0xfc>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d108      	bne.n	8002890 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002884:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	4313      	orrs	r3, r2
 800288e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	4313      	orrs	r3, r2
 800289c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a08      	ldr	r2, [pc, #32]	; (80028d8 <TIM_Base_SetConfig+0xe4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d103      	bne.n	80028c4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	691a      	ldr	r2, [r3, #16]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	615a      	str	r2, [r3, #20]
}
 80028ca:	bf00      	nop
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	40010000 	.word	0x40010000
 80028dc:	40000400 	.word	0x40000400
 80028e0:	40000800 	.word	0x40000800
 80028e4:	40000c00 	.word	0x40000c00
 80028e8:	40014000 	.word	0x40014000
 80028ec:	40014400 	.word	0x40014400
 80028f0:	40014800 	.word	0x40014800

080028f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b087      	sub	sp, #28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	f023 0201 	bic.w	r2, r3, #1
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f023 0303 	bic.w	r3, r3, #3
 800292a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	4313      	orrs	r3, r2
 8002934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	f023 0302 	bic.w	r3, r3, #2
 800293c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	4313      	orrs	r3, r2
 8002946:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a1c      	ldr	r2, [pc, #112]	; (80029bc <TIM_OC1_SetConfig+0xc8>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d10c      	bne.n	800296a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	f023 0308 	bic.w	r3, r3, #8
 8002956:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	4313      	orrs	r3, r2
 8002960:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	f023 0304 	bic.w	r3, r3, #4
 8002968:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a13      	ldr	r2, [pc, #76]	; (80029bc <TIM_OC1_SetConfig+0xc8>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d111      	bne.n	8002996 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002978:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002980:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	4313      	orrs	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	4313      	orrs	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	621a      	str	r2, [r3, #32]
}
 80029b0:	bf00      	nop
 80029b2:	371c      	adds	r7, #28
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	40010000 	.word	0x40010000

080029c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b087      	sub	sp, #28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	f023 0210 	bic.w	r2, r3, #16
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	021b      	lsls	r3, r3, #8
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	f023 0320 	bic.w	r3, r3, #32
 8002a0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a1e      	ldr	r2, [pc, #120]	; (8002a94 <TIM_OC2_SetConfig+0xd4>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d10d      	bne.n	8002a3c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	011b      	lsls	r3, r3, #4
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a15      	ldr	r2, [pc, #84]	; (8002a94 <TIM_OC2_SetConfig+0xd4>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d113      	bne.n	8002a6c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	695b      	ldr	r3, [r3, #20]
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	621a      	str	r2, [r3, #32]
}
 8002a86:	bf00      	nop
 8002a88:	371c      	adds	r7, #28
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	40010000 	.word	0x40010000

08002a98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b087      	sub	sp, #28
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f023 0303 	bic.w	r3, r3, #3
 8002ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	021b      	lsls	r3, r3, #8
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a1d      	ldr	r2, [pc, #116]	; (8002b68 <TIM_OC3_SetConfig+0xd0>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d10d      	bne.n	8002b12 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002afc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	021b      	lsls	r3, r3, #8
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a14      	ldr	r2, [pc, #80]	; (8002b68 <TIM_OC3_SetConfig+0xd0>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d113      	bne.n	8002b42 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	011b      	lsls	r3, r3, #4
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	011b      	lsls	r3, r3, #4
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685a      	ldr	r2, [r3, #4]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	621a      	str	r2, [r3, #32]
}
 8002b5c:	bf00      	nop
 8002b5e:	371c      	adds	r7, #28
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	40010000 	.word	0x40010000

08002b6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b087      	sub	sp, #28
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ba2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	021b      	lsls	r3, r3, #8
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	031b      	lsls	r3, r3, #12
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a10      	ldr	r2, [pc, #64]	; (8002c08 <TIM_OC4_SetConfig+0x9c>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d109      	bne.n	8002be0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	019b      	lsls	r3, r3, #6
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	621a      	str	r2, [r3, #32]
}
 8002bfa:	bf00      	nop
 8002bfc:	371c      	adds	r7, #28
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	40010000 	.word	0x40010000

08002c0c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c16:	2300      	movs	r3, #0
 8002c18:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c28:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	f023 0307 	bic.w	r3, r3, #7
 8002c3a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b70      	cmp	r3, #112	; 0x70
 8002c54:	d01a      	beq.n	8002c8c <TIM_SlaveTimer_SetConfig+0x80>
 8002c56:	2b70      	cmp	r3, #112	; 0x70
 8002c58:	d860      	bhi.n	8002d1c <TIM_SlaveTimer_SetConfig+0x110>
 8002c5a:	2b60      	cmp	r3, #96	; 0x60
 8002c5c:	d054      	beq.n	8002d08 <TIM_SlaveTimer_SetConfig+0xfc>
 8002c5e:	2b60      	cmp	r3, #96	; 0x60
 8002c60:	d85c      	bhi.n	8002d1c <TIM_SlaveTimer_SetConfig+0x110>
 8002c62:	2b50      	cmp	r3, #80	; 0x50
 8002c64:	d046      	beq.n	8002cf4 <TIM_SlaveTimer_SetConfig+0xe8>
 8002c66:	2b50      	cmp	r3, #80	; 0x50
 8002c68:	d858      	bhi.n	8002d1c <TIM_SlaveTimer_SetConfig+0x110>
 8002c6a:	2b40      	cmp	r3, #64	; 0x40
 8002c6c:	d019      	beq.n	8002ca2 <TIM_SlaveTimer_SetConfig+0x96>
 8002c6e:	2b40      	cmp	r3, #64	; 0x40
 8002c70:	d854      	bhi.n	8002d1c <TIM_SlaveTimer_SetConfig+0x110>
 8002c72:	2b30      	cmp	r3, #48	; 0x30
 8002c74:	d055      	beq.n	8002d22 <TIM_SlaveTimer_SetConfig+0x116>
 8002c76:	2b30      	cmp	r3, #48	; 0x30
 8002c78:	d850      	bhi.n	8002d1c <TIM_SlaveTimer_SetConfig+0x110>
 8002c7a:	2b20      	cmp	r3, #32
 8002c7c:	d051      	beq.n	8002d22 <TIM_SlaveTimer_SetConfig+0x116>
 8002c7e:	2b20      	cmp	r3, #32
 8002c80:	d84c      	bhi.n	8002d1c <TIM_SlaveTimer_SetConfig+0x110>
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d04d      	beq.n	8002d22 <TIM_SlaveTimer_SetConfig+0x116>
 8002c86:	2b10      	cmp	r3, #16
 8002c88:	d04b      	beq.n	8002d22 <TIM_SlaveTimer_SetConfig+0x116>
 8002c8a:	e047      	b.n	8002d1c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6818      	ldr	r0, [r3, #0]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	68d9      	ldr	r1, [r3, #12]
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	f000 f9c5 	bl	800302a <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8002ca0:	e040      	b.n	8002d24 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2b05      	cmp	r3, #5
 8002ca8:	d101      	bne.n	8002cae <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e03b      	b.n	8002d26 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6a1a      	ldr	r2, [r3, #32]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0201 	bic.w	r2, r2, #1
 8002cc4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cd4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	011b      	lsls	r3, r3, #4
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	621a      	str	r2, [r3, #32]
      break;
 8002cf2:	e017      	b.n	8002d24 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6818      	ldr	r0, [r3, #0]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	6899      	ldr	r1, [r3, #8]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	461a      	mov	r2, r3
 8002d02:	f000 f87d 	bl	8002e00 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8002d06:	e00d      	b.n	8002d24 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6818      	ldr	r0, [r3, #0]
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	6899      	ldr	r1, [r3, #8]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	461a      	mov	r2, r3
 8002d16:	f000 f8df 	bl	8002ed8 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8002d1a:	e003      	b.n	8002d24 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	75fb      	strb	r3, [r7, #23]
      break;
 8002d20:	e000      	b.n	8002d24 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8002d22:	bf00      	nop
  }

  return status;
 8002d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b087      	sub	sp, #28
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
 8002d3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	f023 0201 	bic.w	r2, r3, #1
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	4a24      	ldr	r2, [pc, #144]	; (8002dec <TIM_TI1_SetConfig+0xbc>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d013      	beq.n	8002d86 <TIM_TI1_SetConfig+0x56>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d64:	d00f      	beq.n	8002d86 <TIM_TI1_SetConfig+0x56>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	4a21      	ldr	r2, [pc, #132]	; (8002df0 <TIM_TI1_SetConfig+0xc0>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d00b      	beq.n	8002d86 <TIM_TI1_SetConfig+0x56>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	4a20      	ldr	r2, [pc, #128]	; (8002df4 <TIM_TI1_SetConfig+0xc4>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d007      	beq.n	8002d86 <TIM_TI1_SetConfig+0x56>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	4a1f      	ldr	r2, [pc, #124]	; (8002df8 <TIM_TI1_SetConfig+0xc8>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d003      	beq.n	8002d86 <TIM_TI1_SetConfig+0x56>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	4a1e      	ldr	r2, [pc, #120]	; (8002dfc <TIM_TI1_SetConfig+0xcc>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d101      	bne.n	8002d8a <TIM_TI1_SetConfig+0x5a>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <TIM_TI1_SetConfig+0x5c>
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d008      	beq.n	8002da2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	f023 0303 	bic.w	r3, r3, #3
 8002d96:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	e003      	b.n	8002daa <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f043 0301 	orr.w	r3, r3, #1
 8002da8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002db0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	011b      	lsls	r3, r3, #4
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	f023 030a 	bic.w	r3, r3, #10
 8002dc4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	f003 030a 	and.w	r3, r3, #10
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	621a      	str	r2, [r3, #32]
}
 8002dde:	bf00      	nop
 8002de0:	371c      	adds	r7, #28
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	40010000 	.word	0x40010000
 8002df0:	40000400 	.word	0x40000400
 8002df4:	40000800 	.word	0x40000800
 8002df8:	40000c00 	.word	0x40000c00
 8002dfc:	40014000 	.word	0x40014000

08002e00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b087      	sub	sp, #28
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	f023 0201 	bic.w	r2, r3, #1
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	011b      	lsls	r3, r3, #4
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f023 030a 	bic.w	r3, r3, #10
 8002e3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	621a      	str	r2, [r3, #32]
}
 8002e52:	bf00      	nop
 8002e54:	371c      	adds	r7, #28
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b087      	sub	sp, #28
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	60f8      	str	r0, [r7, #12]
 8002e66:	60b9      	str	r1, [r7, #8]
 8002e68:	607a      	str	r2, [r7, #4]
 8002e6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	f023 0210 	bic.w	r2, r3, #16
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e8a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	021b      	lsls	r3, r3, #8
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	031b      	lsls	r3, r3, #12
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002eb0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	011b      	lsls	r3, r3, #4
 8002eb6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	621a      	str	r2, [r3, #32]
}
 8002ecc:	bf00      	nop
 8002ece:	371c      	adds	r7, #28
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b087      	sub	sp, #28
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	f023 0210 	bic.w	r2, r3, #16
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f02:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	031b      	lsls	r3, r3, #12
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	011b      	lsls	r3, r3, #4
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	621a      	str	r2, [r3, #32]
}
 8002f2c:	bf00      	nop
 8002f2e:	371c      	adds	r7, #28
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b087      	sub	sp, #28
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
 8002f44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f023 0303 	bic.w	r3, r3, #3
 8002f64:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f74:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	011b      	lsls	r3, r3, #4
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002f88:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	021b      	lsls	r3, r3, #8
 8002f8e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	621a      	str	r2, [r3, #32]
}
 8002fa4:	bf00      	nop
 8002fa6:	371c      	adds	r7, #28
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b087      	sub	sp, #28
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
 8002fbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fdc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	021b      	lsls	r3, r3, #8
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	031b      	lsls	r3, r3, #12
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003002:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	031b      	lsls	r3, r3, #12
 8003008:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	4313      	orrs	r3, r2
 8003010:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	621a      	str	r2, [r3, #32]
}
 800301e:	bf00      	nop
 8003020:	371c      	adds	r7, #28
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr

0800302a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800302a:	b480      	push	{r7}
 800302c:	b087      	sub	sp, #28
 800302e:	af00      	add	r7, sp, #0
 8003030:	60f8      	str	r0, [r7, #12]
 8003032:	60b9      	str	r1, [r7, #8]
 8003034:	607a      	str	r2, [r7, #4]
 8003036:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003044:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	021a      	lsls	r2, r3, #8
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	431a      	orrs	r2, r3
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	4313      	orrs	r3, r2
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	4313      	orrs	r3, r2
 8003056:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	609a      	str	r2, [r3, #8]
}
 800305e:	bf00      	nop
 8003060:	371c      	adds	r7, #28
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800306a:	b480      	push	{r7}
 800306c:	b087      	sub	sp, #28
 800306e:	af00      	add	r7, sp, #0
 8003070:	60f8      	str	r0, [r7, #12]
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	f003 031f 	and.w	r3, r3, #31
 800307c:	2201      	movs	r2, #1
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a1a      	ldr	r2, [r3, #32]
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	43db      	mvns	r3, r3
 800308c:	401a      	ands	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6a1a      	ldr	r2, [r3, #32]
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	f003 031f 	and.w	r3, r3, #31
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	fa01 f303 	lsl.w	r3, r1, r3
 80030a2:	431a      	orrs	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	621a      	str	r2, [r3, #32]
}
 80030a8:	bf00      	nop
 80030aa:	371c      	adds	r7, #28
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d101      	bne.n	80030cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030c8:	2302      	movs	r3, #2
 80030ca:	e050      	b.n	800316e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2202      	movs	r2, #2
 80030d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a1c      	ldr	r2, [pc, #112]	; (800317c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d018      	beq.n	8003142 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003118:	d013      	beq.n	8003142 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a18      	ldr	r2, [pc, #96]	; (8003180 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d00e      	beq.n	8003142 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a16      	ldr	r2, [pc, #88]	; (8003184 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d009      	beq.n	8003142 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a15      	ldr	r2, [pc, #84]	; (8003188 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d004      	beq.n	8003142 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a13      	ldr	r2, [pc, #76]	; (800318c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d10c      	bne.n	800315c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003148:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	4313      	orrs	r3, r2
 8003152:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	40010000 	.word	0x40010000
 8003180:	40000400 	.word	0x40000400
 8003184:	40000800 	.word	0x40000800
 8003188:	40000c00 	.word	0x40000c00
 800318c:	40014000 	.word	0x40014000

08003190 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800319a:	2300      	movs	r3, #0
 800319c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d101      	bne.n	80031ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80031a8:	2302      	movs	r3, #2
 80031aa:	e03d      	b.n	8003228 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	4313      	orrs	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	4313      	orrs	r3, r2
 80031dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	4313      	orrs	r3, r2
 8003206:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	4313      	orrs	r3, r2
 8003214:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e03f      	b.n	80032c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d106      	bne.n	8003260 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7fd fed2 	bl	8001004 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2224      	movs	r2, #36	; 0x24
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003276:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 f829 	bl	80032d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	691a      	ldr	r2, [r3, #16]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800328c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	695a      	ldr	r2, [r3, #20]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800329c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68da      	ldr	r2, [r3, #12]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2220      	movs	r2, #32
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2220      	movs	r2, #32
 80032c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
	...

080032d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032d4:	b0c0      	sub	sp, #256	; 0x100
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80032e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ec:	68d9      	ldr	r1, [r3, #12]
 80032ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	ea40 0301 	orr.w	r3, r0, r1
 80032f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	431a      	orrs	r2, r3
 8003308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	431a      	orrs	r2, r3
 8003310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	4313      	orrs	r3, r2
 8003318:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800331c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003328:	f021 010c 	bic.w	r1, r1, #12
 800332c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003336:	430b      	orrs	r3, r1
 8003338:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800333a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800334a:	6999      	ldr	r1, [r3, #24]
 800334c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	ea40 0301 	orr.w	r3, r0, r1
 8003356:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	4b8f      	ldr	r3, [pc, #572]	; (800359c <UART_SetConfig+0x2cc>)
 8003360:	429a      	cmp	r2, r3
 8003362:	d005      	beq.n	8003370 <UART_SetConfig+0xa0>
 8003364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	4b8d      	ldr	r3, [pc, #564]	; (80035a0 <UART_SetConfig+0x2d0>)
 800336c:	429a      	cmp	r2, r3
 800336e:	d104      	bne.n	800337a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003370:	f7fe fe6e 	bl	8002050 <HAL_RCC_GetPCLK2Freq>
 8003374:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003378:	e003      	b.n	8003382 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800337a:	f7fe fe55 	bl	8002028 <HAL_RCC_GetPCLK1Freq>
 800337e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003386:	69db      	ldr	r3, [r3, #28]
 8003388:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800338c:	f040 810c 	bne.w	80035a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003390:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003394:	2200      	movs	r2, #0
 8003396:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800339a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800339e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80033a2:	4622      	mov	r2, r4
 80033a4:	462b      	mov	r3, r5
 80033a6:	1891      	adds	r1, r2, r2
 80033a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80033aa:	415b      	adcs	r3, r3
 80033ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80033b2:	4621      	mov	r1, r4
 80033b4:	eb12 0801 	adds.w	r8, r2, r1
 80033b8:	4629      	mov	r1, r5
 80033ba:	eb43 0901 	adc.w	r9, r3, r1
 80033be:	f04f 0200 	mov.w	r2, #0
 80033c2:	f04f 0300 	mov.w	r3, #0
 80033c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033d2:	4690      	mov	r8, r2
 80033d4:	4699      	mov	r9, r3
 80033d6:	4623      	mov	r3, r4
 80033d8:	eb18 0303 	adds.w	r3, r8, r3
 80033dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80033e0:	462b      	mov	r3, r5
 80033e2:	eb49 0303 	adc.w	r3, r9, r3
 80033e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80033ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80033f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80033fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80033fe:	460b      	mov	r3, r1
 8003400:	18db      	adds	r3, r3, r3
 8003402:	653b      	str	r3, [r7, #80]	; 0x50
 8003404:	4613      	mov	r3, r2
 8003406:	eb42 0303 	adc.w	r3, r2, r3
 800340a:	657b      	str	r3, [r7, #84]	; 0x54
 800340c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003410:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003414:	f7fc fede 	bl	80001d4 <__aeabi_uldivmod>
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	4b61      	ldr	r3, [pc, #388]	; (80035a4 <UART_SetConfig+0x2d4>)
 800341e:	fba3 2302 	umull	r2, r3, r3, r2
 8003422:	095b      	lsrs	r3, r3, #5
 8003424:	011c      	lsls	r4, r3, #4
 8003426:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800342a:	2200      	movs	r2, #0
 800342c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003430:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003434:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003438:	4642      	mov	r2, r8
 800343a:	464b      	mov	r3, r9
 800343c:	1891      	adds	r1, r2, r2
 800343e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003440:	415b      	adcs	r3, r3
 8003442:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003444:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003448:	4641      	mov	r1, r8
 800344a:	eb12 0a01 	adds.w	sl, r2, r1
 800344e:	4649      	mov	r1, r9
 8003450:	eb43 0b01 	adc.w	fp, r3, r1
 8003454:	f04f 0200 	mov.w	r2, #0
 8003458:	f04f 0300 	mov.w	r3, #0
 800345c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003460:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003464:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003468:	4692      	mov	sl, r2
 800346a:	469b      	mov	fp, r3
 800346c:	4643      	mov	r3, r8
 800346e:	eb1a 0303 	adds.w	r3, sl, r3
 8003472:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003476:	464b      	mov	r3, r9
 8003478:	eb4b 0303 	adc.w	r3, fp, r3
 800347c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800348c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003490:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003494:	460b      	mov	r3, r1
 8003496:	18db      	adds	r3, r3, r3
 8003498:	643b      	str	r3, [r7, #64]	; 0x40
 800349a:	4613      	mov	r3, r2
 800349c:	eb42 0303 	adc.w	r3, r2, r3
 80034a0:	647b      	str	r3, [r7, #68]	; 0x44
 80034a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80034a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80034aa:	f7fc fe93 	bl	80001d4 <__aeabi_uldivmod>
 80034ae:	4602      	mov	r2, r0
 80034b0:	460b      	mov	r3, r1
 80034b2:	4611      	mov	r1, r2
 80034b4:	4b3b      	ldr	r3, [pc, #236]	; (80035a4 <UART_SetConfig+0x2d4>)
 80034b6:	fba3 2301 	umull	r2, r3, r3, r1
 80034ba:	095b      	lsrs	r3, r3, #5
 80034bc:	2264      	movs	r2, #100	; 0x64
 80034be:	fb02 f303 	mul.w	r3, r2, r3
 80034c2:	1acb      	subs	r3, r1, r3
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80034ca:	4b36      	ldr	r3, [pc, #216]	; (80035a4 <UART_SetConfig+0x2d4>)
 80034cc:	fba3 2302 	umull	r2, r3, r3, r2
 80034d0:	095b      	lsrs	r3, r3, #5
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80034d8:	441c      	add	r4, r3
 80034da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034de:	2200      	movs	r2, #0
 80034e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80034e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80034e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80034ec:	4642      	mov	r2, r8
 80034ee:	464b      	mov	r3, r9
 80034f0:	1891      	adds	r1, r2, r2
 80034f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80034f4:	415b      	adcs	r3, r3
 80034f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80034fc:	4641      	mov	r1, r8
 80034fe:	1851      	adds	r1, r2, r1
 8003500:	6339      	str	r1, [r7, #48]	; 0x30
 8003502:	4649      	mov	r1, r9
 8003504:	414b      	adcs	r3, r1
 8003506:	637b      	str	r3, [r7, #52]	; 0x34
 8003508:	f04f 0200 	mov.w	r2, #0
 800350c:	f04f 0300 	mov.w	r3, #0
 8003510:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003514:	4659      	mov	r1, fp
 8003516:	00cb      	lsls	r3, r1, #3
 8003518:	4651      	mov	r1, sl
 800351a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800351e:	4651      	mov	r1, sl
 8003520:	00ca      	lsls	r2, r1, #3
 8003522:	4610      	mov	r0, r2
 8003524:	4619      	mov	r1, r3
 8003526:	4603      	mov	r3, r0
 8003528:	4642      	mov	r2, r8
 800352a:	189b      	adds	r3, r3, r2
 800352c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003530:	464b      	mov	r3, r9
 8003532:	460a      	mov	r2, r1
 8003534:	eb42 0303 	adc.w	r3, r2, r3
 8003538:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800353c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003548:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800354c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003550:	460b      	mov	r3, r1
 8003552:	18db      	adds	r3, r3, r3
 8003554:	62bb      	str	r3, [r7, #40]	; 0x28
 8003556:	4613      	mov	r3, r2
 8003558:	eb42 0303 	adc.w	r3, r2, r3
 800355c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800355e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003562:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003566:	f7fc fe35 	bl	80001d4 <__aeabi_uldivmod>
 800356a:	4602      	mov	r2, r0
 800356c:	460b      	mov	r3, r1
 800356e:	4b0d      	ldr	r3, [pc, #52]	; (80035a4 <UART_SetConfig+0x2d4>)
 8003570:	fba3 1302 	umull	r1, r3, r3, r2
 8003574:	095b      	lsrs	r3, r3, #5
 8003576:	2164      	movs	r1, #100	; 0x64
 8003578:	fb01 f303 	mul.w	r3, r1, r3
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	3332      	adds	r3, #50	; 0x32
 8003582:	4a08      	ldr	r2, [pc, #32]	; (80035a4 <UART_SetConfig+0x2d4>)
 8003584:	fba2 2303 	umull	r2, r3, r2, r3
 8003588:	095b      	lsrs	r3, r3, #5
 800358a:	f003 0207 	and.w	r2, r3, #7
 800358e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4422      	add	r2, r4
 8003596:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003598:	e105      	b.n	80037a6 <UART_SetConfig+0x4d6>
 800359a:	bf00      	nop
 800359c:	40011000 	.word	0x40011000
 80035a0:	40011400 	.word	0x40011400
 80035a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035ac:	2200      	movs	r2, #0
 80035ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80035b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80035b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80035ba:	4642      	mov	r2, r8
 80035bc:	464b      	mov	r3, r9
 80035be:	1891      	adds	r1, r2, r2
 80035c0:	6239      	str	r1, [r7, #32]
 80035c2:	415b      	adcs	r3, r3
 80035c4:	627b      	str	r3, [r7, #36]	; 0x24
 80035c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035ca:	4641      	mov	r1, r8
 80035cc:	1854      	adds	r4, r2, r1
 80035ce:	4649      	mov	r1, r9
 80035d0:	eb43 0501 	adc.w	r5, r3, r1
 80035d4:	f04f 0200 	mov.w	r2, #0
 80035d8:	f04f 0300 	mov.w	r3, #0
 80035dc:	00eb      	lsls	r3, r5, #3
 80035de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035e2:	00e2      	lsls	r2, r4, #3
 80035e4:	4614      	mov	r4, r2
 80035e6:	461d      	mov	r5, r3
 80035e8:	4643      	mov	r3, r8
 80035ea:	18e3      	adds	r3, r4, r3
 80035ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80035f0:	464b      	mov	r3, r9
 80035f2:	eb45 0303 	adc.w	r3, r5, r3
 80035f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80035fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003606:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	f04f 0300 	mov.w	r3, #0
 8003612:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003616:	4629      	mov	r1, r5
 8003618:	008b      	lsls	r3, r1, #2
 800361a:	4621      	mov	r1, r4
 800361c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003620:	4621      	mov	r1, r4
 8003622:	008a      	lsls	r2, r1, #2
 8003624:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003628:	f7fc fdd4 	bl	80001d4 <__aeabi_uldivmod>
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	4b60      	ldr	r3, [pc, #384]	; (80037b4 <UART_SetConfig+0x4e4>)
 8003632:	fba3 2302 	umull	r2, r3, r3, r2
 8003636:	095b      	lsrs	r3, r3, #5
 8003638:	011c      	lsls	r4, r3, #4
 800363a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800363e:	2200      	movs	r2, #0
 8003640:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003644:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003648:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800364c:	4642      	mov	r2, r8
 800364e:	464b      	mov	r3, r9
 8003650:	1891      	adds	r1, r2, r2
 8003652:	61b9      	str	r1, [r7, #24]
 8003654:	415b      	adcs	r3, r3
 8003656:	61fb      	str	r3, [r7, #28]
 8003658:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800365c:	4641      	mov	r1, r8
 800365e:	1851      	adds	r1, r2, r1
 8003660:	6139      	str	r1, [r7, #16]
 8003662:	4649      	mov	r1, r9
 8003664:	414b      	adcs	r3, r1
 8003666:	617b      	str	r3, [r7, #20]
 8003668:	f04f 0200 	mov.w	r2, #0
 800366c:	f04f 0300 	mov.w	r3, #0
 8003670:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003674:	4659      	mov	r1, fp
 8003676:	00cb      	lsls	r3, r1, #3
 8003678:	4651      	mov	r1, sl
 800367a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800367e:	4651      	mov	r1, sl
 8003680:	00ca      	lsls	r2, r1, #3
 8003682:	4610      	mov	r0, r2
 8003684:	4619      	mov	r1, r3
 8003686:	4603      	mov	r3, r0
 8003688:	4642      	mov	r2, r8
 800368a:	189b      	adds	r3, r3, r2
 800368c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003690:	464b      	mov	r3, r9
 8003692:	460a      	mov	r2, r1
 8003694:	eb42 0303 	adc.w	r3, r2, r3
 8003698:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800369c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80036a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80036a8:	f04f 0200 	mov.w	r2, #0
 80036ac:	f04f 0300 	mov.w	r3, #0
 80036b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80036b4:	4649      	mov	r1, r9
 80036b6:	008b      	lsls	r3, r1, #2
 80036b8:	4641      	mov	r1, r8
 80036ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036be:	4641      	mov	r1, r8
 80036c0:	008a      	lsls	r2, r1, #2
 80036c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80036c6:	f7fc fd85 	bl	80001d4 <__aeabi_uldivmod>
 80036ca:	4602      	mov	r2, r0
 80036cc:	460b      	mov	r3, r1
 80036ce:	4b39      	ldr	r3, [pc, #228]	; (80037b4 <UART_SetConfig+0x4e4>)
 80036d0:	fba3 1302 	umull	r1, r3, r3, r2
 80036d4:	095b      	lsrs	r3, r3, #5
 80036d6:	2164      	movs	r1, #100	; 0x64
 80036d8:	fb01 f303 	mul.w	r3, r1, r3
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	011b      	lsls	r3, r3, #4
 80036e0:	3332      	adds	r3, #50	; 0x32
 80036e2:	4a34      	ldr	r2, [pc, #208]	; (80037b4 <UART_SetConfig+0x4e4>)
 80036e4:	fba2 2303 	umull	r2, r3, r2, r3
 80036e8:	095b      	lsrs	r3, r3, #5
 80036ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036ee:	441c      	add	r4, r3
 80036f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036f4:	2200      	movs	r2, #0
 80036f6:	673b      	str	r3, [r7, #112]	; 0x70
 80036f8:	677a      	str	r2, [r7, #116]	; 0x74
 80036fa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80036fe:	4642      	mov	r2, r8
 8003700:	464b      	mov	r3, r9
 8003702:	1891      	adds	r1, r2, r2
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	415b      	adcs	r3, r3
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800370e:	4641      	mov	r1, r8
 8003710:	1851      	adds	r1, r2, r1
 8003712:	6039      	str	r1, [r7, #0]
 8003714:	4649      	mov	r1, r9
 8003716:	414b      	adcs	r3, r1
 8003718:	607b      	str	r3, [r7, #4]
 800371a:	f04f 0200 	mov.w	r2, #0
 800371e:	f04f 0300 	mov.w	r3, #0
 8003722:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003726:	4659      	mov	r1, fp
 8003728:	00cb      	lsls	r3, r1, #3
 800372a:	4651      	mov	r1, sl
 800372c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003730:	4651      	mov	r1, sl
 8003732:	00ca      	lsls	r2, r1, #3
 8003734:	4610      	mov	r0, r2
 8003736:	4619      	mov	r1, r3
 8003738:	4603      	mov	r3, r0
 800373a:	4642      	mov	r2, r8
 800373c:	189b      	adds	r3, r3, r2
 800373e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003740:	464b      	mov	r3, r9
 8003742:	460a      	mov	r2, r1
 8003744:	eb42 0303 	adc.w	r3, r2, r3
 8003748:	66fb      	str	r3, [r7, #108]	; 0x6c
 800374a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	663b      	str	r3, [r7, #96]	; 0x60
 8003754:	667a      	str	r2, [r7, #100]	; 0x64
 8003756:	f04f 0200 	mov.w	r2, #0
 800375a:	f04f 0300 	mov.w	r3, #0
 800375e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003762:	4649      	mov	r1, r9
 8003764:	008b      	lsls	r3, r1, #2
 8003766:	4641      	mov	r1, r8
 8003768:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800376c:	4641      	mov	r1, r8
 800376e:	008a      	lsls	r2, r1, #2
 8003770:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003774:	f7fc fd2e 	bl	80001d4 <__aeabi_uldivmod>
 8003778:	4602      	mov	r2, r0
 800377a:	460b      	mov	r3, r1
 800377c:	4b0d      	ldr	r3, [pc, #52]	; (80037b4 <UART_SetConfig+0x4e4>)
 800377e:	fba3 1302 	umull	r1, r3, r3, r2
 8003782:	095b      	lsrs	r3, r3, #5
 8003784:	2164      	movs	r1, #100	; 0x64
 8003786:	fb01 f303 	mul.w	r3, r1, r3
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	011b      	lsls	r3, r3, #4
 800378e:	3332      	adds	r3, #50	; 0x32
 8003790:	4a08      	ldr	r2, [pc, #32]	; (80037b4 <UART_SetConfig+0x4e4>)
 8003792:	fba2 2303 	umull	r2, r3, r2, r3
 8003796:	095b      	lsrs	r3, r3, #5
 8003798:	f003 020f 	and.w	r2, r3, #15
 800379c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4422      	add	r2, r4
 80037a4:	609a      	str	r2, [r3, #8]
}
 80037a6:	bf00      	nop
 80037a8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80037ac:	46bd      	mov	sp, r7
 80037ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037b2:	bf00      	nop
 80037b4:	51eb851f 	.word	0x51eb851f

080037b8 <__libc_init_array>:
 80037b8:	b570      	push	{r4, r5, r6, lr}
 80037ba:	4d0d      	ldr	r5, [pc, #52]	; (80037f0 <__libc_init_array+0x38>)
 80037bc:	4c0d      	ldr	r4, [pc, #52]	; (80037f4 <__libc_init_array+0x3c>)
 80037be:	1b64      	subs	r4, r4, r5
 80037c0:	10a4      	asrs	r4, r4, #2
 80037c2:	2600      	movs	r6, #0
 80037c4:	42a6      	cmp	r6, r4
 80037c6:	d109      	bne.n	80037dc <__libc_init_array+0x24>
 80037c8:	4d0b      	ldr	r5, [pc, #44]	; (80037f8 <__libc_init_array+0x40>)
 80037ca:	4c0c      	ldr	r4, [pc, #48]	; (80037fc <__libc_init_array+0x44>)
 80037cc:	f000 f820 	bl	8003810 <_init>
 80037d0:	1b64      	subs	r4, r4, r5
 80037d2:	10a4      	asrs	r4, r4, #2
 80037d4:	2600      	movs	r6, #0
 80037d6:	42a6      	cmp	r6, r4
 80037d8:	d105      	bne.n	80037e6 <__libc_init_array+0x2e>
 80037da:	bd70      	pop	{r4, r5, r6, pc}
 80037dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80037e0:	4798      	blx	r3
 80037e2:	3601      	adds	r6, #1
 80037e4:	e7ee      	b.n	80037c4 <__libc_init_array+0xc>
 80037e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80037ea:	4798      	blx	r3
 80037ec:	3601      	adds	r6, #1
 80037ee:	e7f2      	b.n	80037d6 <__libc_init_array+0x1e>
 80037f0:	08003848 	.word	0x08003848
 80037f4:	08003848 	.word	0x08003848
 80037f8:	08003848 	.word	0x08003848
 80037fc:	0800384c 	.word	0x0800384c

08003800 <memset>:
 8003800:	4402      	add	r2, r0
 8003802:	4603      	mov	r3, r0
 8003804:	4293      	cmp	r3, r2
 8003806:	d100      	bne.n	800380a <memset+0xa>
 8003808:	4770      	bx	lr
 800380a:	f803 1b01 	strb.w	r1, [r3], #1
 800380e:	e7f9      	b.n	8003804 <memset+0x4>

08003810 <_init>:
 8003810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003812:	bf00      	nop
 8003814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003816:	bc08      	pop	{r3}
 8003818:	469e      	mov	lr, r3
 800381a:	4770      	bx	lr

0800381c <_fini>:
 800381c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800381e:	bf00      	nop
 8003820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003822:	bc08      	pop	{r3}
 8003824:	469e      	mov	lr, r3
 8003826:	4770      	bx	lr
